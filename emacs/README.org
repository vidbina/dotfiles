#+OPTIONS: html5-fancy:t
#+HTML_DOCTYPE: html5
#+TITLE: Emacs 🦬 Configuration

This is an emoji-heavy 😅 literal[fn:1] configuration for [[https://www.gnu.org/software/emacs/][Emacs]] which is definitely not as feature complete like some distros out there (think: [[https://github.com/hlissner/doom-emacs][Doom Emacs]] or [[https://www.spacemacs.org/][Spacemacs]]) but may still provide you a pragmatic and easily parsable configuration that sticks to standard tooling 🧰 and patterns while providing sufficient context as to what is happening such that beginners[fn:2] can also have a good time cooking 👨🏿‍🔬 up or tweaking 👨🏿‍🔧 their configurations.

* Installation

<<emacsconfdir>>
⚠️ For this configuration we will refer to your /emacs configuration directory/ as =~/.emacs.d= for historic and didactic reasons, but it may be =~/.config/emacs= in your case. Consult [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html][How Emacs Finds Your Init File]] for explanation on how Emacs loads configurations and note that every mention of =~/.emacs.d= in this literate config assumes that you substitute it for your actual /emacs configuration directory/.

Clone this repository and symlink =~/.emacs.d= into the =emacs= directory of this configuration:
1. clone this repo to a path of choice (e.g.: =~/src/THIS_REPO=)
2. symlink =~/.emacs.d=[fn:3] to the =emacs= subdirectory of the cloned project (e.g.: =ln -s ~/src/THIS_REPO/emacs ~/.emacs.d=)
3. optionally, populate =~/.emacs.d/lang.el= or =~/.emacs.d/personal.el= (refer to [[*Usage][Usage]] for instructions)
4. reload your config or restart Emacs (e.g.: I have to run =systemctl --restart emacs.service= on NixOS since I am running Emacs as a systemd-managed service)

⚠️ Note that we are in subdirectory =emacs= of a dotfiles repository here which is all examples of commands or paths are written from the perspective of the [[file:..][top-level]] directory of this repository.

* Usage

Use this configuration by changing [[file:README.org][this README.org file]], the only source of truth, and tangling it to produce Elisp files [[file:early-init.el]], [[file:init.el]], [[file:lang.el]] and [[file:personal-example.el]] using the ~(org-babel-tangle)~ function which is mapped to =C-c C-v C-t= or =C-c C-v t= by default.

The files of this configuration are as follows:
- [[file:README.org]] :: source of truth that describes the entire configuration and tangles into the Elisp files listed below
- [[file:early-init.el]] :: configuration that is loaded before the GUI and package system are started (see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][The Early Init File]])
- [[file:init.el]] :: primary configuration file that Emacs loads on start (see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html][The Emacs Initialization File]]),
- [[file:lang.el]] :: optional configuration file for language-specific settings, and
- [[file:personal-example.el]] :: reference for [[file:personal.el]] where you can add your personally sensitive configuration.
- [[file:personal.el]] :: optional configuration file for personal setting which can be populated by copying [[file:personal-example.el]] for to get started and modifying the code as necessary

#+begin_src dot :file images/conf-setup.png :exports results
digraph G {
  subgraph cluster_emacs {
    label="Emacs load process"
    node_earlyinit [shape=box, label="early-init.el", style=filled]
    node_init [shape=box, label="init.el", style=filled]
    node_personal [shape=box, label="personal.el", style=filled]
    node_lang [shape=box, label="lang.el", style=filled]

    node_init -> node_personal [label="loads"]
    node_init -> node_lang [label="loads"]
  }

  node_this [shape=box, label="README.org"]
  node_personal_example [shape=box, label="personal-example.el"]

  node_this -> node_earlyinit [label="tangles to"]
  node_this -> node_init [label="tangles to"]
  node_this -> node_personal_example [label="tangles to"]
  node_personal_example -> node_personal [style=dotted]
}
#+end_src

#+RESULTS:
[[file:images/conf-setup.png]]

* 📦 Package Management

Setting =package-enable-at-startup= to =nil= before the Emacs default package system even loads (i.e.: before *early-init.el*) minimizes the potential for global state to affect the configuration which ends up simplifying this configuration's use[fn:4].

#+begin_src elisp :tangle early-init.el
(setq package-enable-at-startup nil)
#+end_src

** Straight 🍀

[[https://github.com/raxod502/straight.el#getting-started][Straight.el]] 🍀 is a popular package manager used to manage Emacs packages.

The primary advantage of using *straight.el* is the ability to _pin package version in a [[file:straight/versions/default.el][lockfile]]_ (e.g.: =~/.emacs.d/straight/versions/default.el=) in manner quite similar to how popular package managers such as Bundler (Ruby) and NPM (JavaScript) or Yarn (JavaScript) improve reproducibility of a configuration by pinning the versions of their packages in a dependency manifest (e.g.: Gemfile.lock for Bundler, package.lock for NPM and yarn.lock for Yarn).

*** ⚠️ Pre-bootstrap Work-around

The issue is that straight relies on the existence of variables with prefixes that have been renamed from =comp= to =native-comp=. So, if the installed variant of Emacs lacks native compilation capability, then straight will be bumping into undefined symbols.

#+begin_src elisp :tangle init.el
;; https://github.com/raxod502/straight.el/issues/757#issuecomment-839764260
(defvar comp-deferred-compilation-deny-list ())
#+end_src

Installation of the following packages may break when this block is disabled:
- straight
- [[*Org-contrib][org-contrib]]
- [[*Dockerfile][dockerfile-mode]]

*** 🥾 Bootstrap

#+begin_src elisp :tangle init.el
;; https://github.com/raxod502/straight.el#getting-started
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

*** Enabling the commonly-used *use-package* interface

For [[use-package-format][convenience]], we configure *straight.el* to use the *use-package* interface.

#+begin_src elisp :tangle init.el
;; https://github.com/raxod502/straight.el#integration-with-use-package
(straight-use-package 'use-package)
#+end_src

In order to improve visibility over package-related issues, we configure =use-package-verbose= such that loading and configuration information is verbosely reported. The reporting output can be examined in the =*Messages*= buffer or in the logging output (.e.g: systemd journal in case Emacs is run as a systemd user unit or service).

#+begin_src elisp :tangle early-init.el
(setq use-package-verbose t)
#+end_src

<<use-package-format>>
If you've used Emacs for a while or have read through a few configurations, you have likely encountered a =use-package= declaration before. An association list (alist) style interface (of keyword[fn:5]-value pairs) is used by *use-package* to provide a pleasantly readable configuration structure.

The [[https://jwiegley.github.io/use-package/keywords/][Keywords]] page provides guidance as to how to use =use-package= keywords and the following snippet demonstrates the general structure of a =use-package= declaration:

#+begin_src elisp :results none
;; Just an example of a use-package form
(use-package my-package-y
  :after
  (:all my-package-a my-package-x)

  :init
  (setq my-package-coefficient 42)
  (message "Just a heads-up: we'll be setting up package y")

  :config
  (my-package-y-run-checks-after-load)
  (my-package-y-check-data-on-filesystem)
  (my-package-y-mode t)

  :bind (("C-c y 1" . my-package-y-do-thing-in-buffer)
         ("C-c y 2" . my-package-y-do-another-thing-in-buffer)))
#+end_src

#+BEGIN_details org
#+HTML: <summary>Historic Context: Before use-package, package-specific configuration declarations may have been spread throughout a configuration and thus difficult to associate or debug.</summary>
For those familiar with classical Emacs configurations, you may recall that it wasn't uncommon to intersperse fragments of configurations of multiple packages in order to get everything loaded in the right order.

Compared to the earlier snippet in which the use of the *use-package* macro was demonstrated, a pre-*use-package* era configuration may have had the relevant declarations for a single package spread throughout a configuration.

#+begin_src elisp :results none
(setq my-package-coefficient 42)
(message "Just a heads-up: we'll be setting up package y")

;; ...

(require 'my-package-a)
(require 'my-package-x)

;; ...

(require 'my-package-y)
(my-package-y-run-checks-after-load)
(my-package-y-check-data-on-filesystem)
(my-package-y-mode t)

(add-hook 'my-package-y-mode
          (lambda ()
            (local-set-key (kbd "C-c y 1") 'my-package-y-do-thing-in-buffer)
            (local-set-key (kbd "C-c y 2") 'my-package-y-do-another-thing-in-buffer))
#+end_src

#+END_details

**** Organization

On the tidying up front, for example, you'll find that the *use-package* macro provides mechanisms to:
1. order the load sequence of packages by defining dependencies by means of the =:after= keyword
2. time application of parts of a configurations before or after /package load/ by means of the =:init= (i.e.: before load) and =:config= (i.e.: after load) keywords
3. bind keychords using the =:bind= keyword

**** Performance

On the performance front, you'll find that the *use-package* macro provides mechanisms to:
1. delay loading of packages by means of the =:defer= or =:demand= keywords
1. delay loading of packages needed in a particular mode or interpreter by means of the =:mode= or =:interpreter= keywords
2. define "as-of-yet not seen" symbols that will be needed for compilation by means of the =:functions= and =:defines= keywords

**** Ordering Management through Hooks

Emacs is a hot mess of global state sorcery and as such it may be useful to load packages or call package-specific functions in a particular order to render a configuration sufficiently functional. 🙊

Using *use-package* interface, the =:after= and =:hook= keywords are probably the more powerful tools to manage the ordering of your packages.

The Emacs [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Startup-Summary.html#Startup-Summary][Startup Summary]] page outlines when the =before-init-hook=, =after-init-hook=, =emacs-startup-hook= and =window-setup-hook= are run.

Through the =:hook= keyword, we can /hook/ operations for a particular package into to the previously listed Emacs lifecycle hooks without leaving the expression for that specific package -- thus keeping all relevant configurations neatly localized.

* 📓 Org

[[https://orgmode.org/worg/org-contrib/org-protocol.html][Org]] is probably the killer app of Emacs and is actually just a clearly standardized markup format. Three ways in which Org discerns itself from Markdown are in that it:
1. has a single clear standard (that is widely used) as opposed to Markdown that has a few variants floating about that exhibit slightly differing behavior[fn:6] and may present a bit of challenge for application developers that wish to implement the standard
2. natively allows for the notation of dates and times which allow for things like time-tracking and planning within a single document.
3. natively provides table support

#+begin_src elisp :tangle init.el
;; https://orgmode.org/worg/org-contrib/org-protocol.html
;; https://github.com/org-roam/org-roam/issues/529
;; https://git.savannah.gnu.org/cgit/emacs/org-mode.git/
(use-package org
  :straight (:type built-in)
  :init
  (setq org-adapt-indentation nil ; https://orgmode.org/manual/Hard-indentation.html
        org-hide-leading-stars nil
        org-odd-levels-only nil)
  :config
  ;; https://orgmode.org/manual/Capture-templates.html#Capture-templates
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c d") 'org-hide-drawer-toggle)
  ;; https://orgmode.org/manual/Structure-Templates.html
  (require 'org-tempo)
  ;; https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-dot.html
  (setq org-plantuml-exec-mode 'plantuml)
  ;; https://www.reddit.com/r/emacs/comments/ldiryk/weird_tab_behavior_in_org_mode_source_blocks
  (setq org-src-preserve-indentation t
        org-hide-block-startup t)
  :custom
  (org-tags-column 0 "Avoid wrapping issues by minimizing tag indentation"))
#+end_src

** Ox-clip: export Org fragments into HTML for rich-text input fields

The ox-clip exporters allow us to export fragments of our org documents into rich-text that is ready to paste into inputs on web apps. I use this frequently to copy org pieces into Google Docs or other online rich-text editors.

#+begin_src elisp :tangle init.el
;; https://github.com/jkitchin/ox-clip
;; https://zzamboni.org/post/my-emacs-configuration-with-commentary/
(use-package ox-clip
  :straight (ox-clip :type git
                     :host github
                     :repo "jkitchin/ox-clip")
  :after org
  :bind
  ("C-c y" . ox-clip-formatted-copy))
#+end_src

** TODO Bibliography

*** ol-BibTeX (Org-BibTeX): Bibliography through org properties

The =ol-bibtex= package, previously known as =org-bibtex= and still prefixed as such, allows for the definition of bibliography entries within Org properties.

#+begin_src org
,** Introduction to Flight Test Engineering
:PROPERTIES:
:BIB_TITLE:    Introduction to Flight Test Engineering
:BIB_BTYPE:    techreport
:BIB_CUSTOM_ID: stoliker2005FTE
:BIB_AUTHOR:   F.N. Stoliker
:BIB_INSTITUTION: RTO
:BIB_YEAR:     2005
:BIB_NUMBER:   RTO-AG-300-V14
:BIB_DATE:     7/25/2005
:BIB_ADDRESS:
:BIB_MONTH:    07
:BIB_BIB_DOI:  10.14339/RTO-AG-300-V14
:BIB_BIB_ISBN: 92-837-1126-2
:BIB_NOTE:
:BIB_ANNOTE:
:END:

Some notes on this book...
#+end_src

The previously listed Org snippet will produce the following BibTeX entry:

#+begin_src bibtex
@techreport{stoliker2005FTE,
  annote={},
  note={},
  isbn={92-837-1126-2},
  doi={10.14339/RTO-AG-300-V14},
  month={07},
  address={},
  date={7/25/2005},
  number={RTO-AG-300-V14},
  year={2005},
  institution={RTO},
  author={F.N. Stoliker},
  custom_id={stoliker2005FTE},
  title={Introduction to Flight Test Engineering}
}
#+end_src

Please note that *ol-bibtex* refers to an internal index =org-bibtex-types= that lists fields for every record type (e.g.: article, book, techreport, etc.) and only honors the entries that are listed therein.

Since, I sometimes need "arbitrary" fields such as =doi= that BibTeX itself may recognize but that the ol-bibtex package will simply ignore (for some bibliography types) as they are not listed in =org-bibtex-types=, it will be necessary to set =org-bibtex-export-arbitrary-types= to honor arbitrary fields which itself will require =org-bibtex-prefix= to also be set (which I set to =BIB_=). The caveat is that setting =org-bibtex-prefix= is an all-or-nothing type of deal and will require us to prefix all BibTeX properties (with =BIB_= in this particular configuration's case).

Another option may be for us to enhance =org-bibtex-headline= to be a bit smarter about honoring "known fields" in a properties block along with "arbitrary fields" as long as they are prefixed. This is only a partial solution as it only solves to problem of converting headlines to BibTeX entries, while the *ol-bibtex* package also helps reading valid BibTeX entries with =org-bibtex-read= and writing them into Org headlines with =org-bibtex-write= where the prefix is used for all entries indicating that prefixing everything is the expected behavior that allows for reliable and consistent bidirectional traffic (Org-to-BibTeX and BibTeX-to-Org).

#+begin_src elisp :tangle init.el
(use-package ol-bibtex
  :straight (:type built-in)
  :after org
  :custom
  (org-bibtex-prefix "BIB_" "Define prefix for arbitrary fields")
  (org-bibtex-export-arbitrary-fields t "Export prefixed fields"))
#+end_src

For reference's sake, note that for headers containing non-prefixed and prefixed fields, *ol-bibtex* will end up exporting the prefixed fields only.

#+begin_src org
,** Introduction to Flight Test Engineering
:PROPERTIES:
:TITLE:    Introduction to Flight Test Engineering
:BTYPE:    techreport
:CUSTOM_ID: stoliker2005FTE
:AUTHOR:   F.N. Stoliker
:INSTITUTION: RTO
:YEAR:     2005
:NUMBER:   RTO-AG-300-V14
:DATE:     7/25/2005
:ADDRESS:
:MONTH:    07
:BIB_DOI:  10.14339/RTO-AG-300-V14
:BIB_ISBN: 92-837-1126-2
:NOTE:
:ANNOTE:
:END:
#+end_src

The example listed above will yield the following BibTeX entry which demonstrates this point.

#+begin_src bibtex
@techreport{stoliker2005FTE,
  isbn={92-837-1126-2},
  doi={10.14339/RTO-AG-300-V14}
}
#+end_src

*** Org-contrib

#+begin_src elisp :tangle init.el
;; https://git.sr.ht/~bzg/org-contrib
(use-package org-contrib
  :straight (org-contrib :type git
                         :host nil
                         :repo "https://git.sr.ht/~bzg/org-contrib")
  :after org)
#+end_src

*** COMMENT Citar (formerly bibtex-actions)

#+begin_src elisp :tangle init.el
;; https://github.com/bdarcus/citar
(use-package citar
  :straight (citar :type git
                   :host github
                   :repo "bdarcus/citar")
  :no-require
  :custom
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar)
  (org-cite-activate-processor 'citar)
  :bind
  (:map org-mode-map :package org ("C-c b" . #'org-cite-insert)))
#+end_src

** 🗄️ Org-Roam

A good solution for maintaining a Zettelkasten-inspired note-taking system is [[https://github.com/org-roam/org-roam][Org-Roam]] which allows one to conveniently link related notes together.

#+CAPTION: Screenshot of Org-Roam in use with an Org-Roam-UI note network graph
[[file:images/screenshot-orui-org-cite-dark.png]]

#+begin_src elisp :tangle init.el
;; https://github.com/org-roam/org-roam
(use-package org-roam
  :straight (org-roam :type git
                      :host github
                      :repo "org-roam/org-roam")
  :after org
  :init
  (setq org-roam-v2-ack t)
  (make-directory (file-truename "~/org/roam/") t)
  :custom
  (org-roam-file-extensions '("org" "md"))
  (org-roam-directory (file-truename "~/org/roam/"))
  (org-roam-db-location (file-truename "~/org/roam/org-roam.db"))
  :config
  (message "📔 org-roam is loaded")
  (org-roam-db-autosync-mode 1)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)))
#+end_src

*** Org-Roam-UI

#+begin_src elisp :tangle init.el
;; https://github.com/org-roam/org-roam-ui
(use-package org-roam-ui
  :delight
  (org-roam-ui-mode "🕸️")
  (org-roam-ui-follow-mode "👀")
  :straight (org-roam-ui :host github
                         :repo "org-roam/org-roam-ui"
                         :branch "main"
                         :files ("*.el" "out"))
  :after org-roam
  ;; normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;; a hookable mode anymore, you're advised to pick something yourself
  ;; if you don't care about startup time, use
  :bind (("C-c n ." . org-roam-ui-node-zoom)
         ("C-c n ," . org-roam-ui-node-local))
  :hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow nil
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start nil))
#+end_src

*** Incorporate Markdown into your Org-Roam use

It isn't unlikely that you will have some of your notes captured in Markdown files. In order to not have to rewrite these files into Org-files, you can use [[https://github.com/nobiot/md-roam][Md-roam]].

#+begin_src elisp :tangle init.el
;; https://github.com/nobiot/md-roam
(use-package md-roam
  :straight (md-roam :type git
                     :host github
                     :repo "nobiot/md-roam")
  :after org-roam
  :init
  (setq md-roam-use-markdown-file-links t
        md-roam-file_extension-single "md"
        org-roam-tag-sources '(prop md-frontmatter)
        org-roam-title-sources '((mdtitle title mdheadline headline) (mdalias alias))))
#+end_src

*** Org-Roam-BibTeX (ORB)

#+begin_src elisp :tangle init.el
;; https://github.com/org-roam/org-roam-bibtex
(use-package org-roam-bibtex
  :straight (org-roam-bibtex :type git
                             :host github
                             :repo "org-roam/org-roam-bibtex")
  :after org-roam)
;;:config
;;(require 'org-ref)
;;:custom
;;(orb-roam-ref-format 'org-ref-v3 "Use new org-ref cite:&links notation in ROAM_REFS property"))
#+end_src

** COMMENT Org-ref

[[https://github.com/jkitchin/org-ref][Org-ref]] provides a system to define citations and cross-references. With Org-cite becoming part of standard-Org since 9.5, I am trying to use standard Org as much as possible which means dropping Org-ref out of my toolbox for a little while.

Org-ref has provisions for cross-referencing that Org-cite doesn't quite provide, so you may want to enable Org-ref in your configuration if you use the Org-ref cite syntax or rely on cross-referencing capability.

#+begin_src elisp :tangle init.el
;; https://github.com/jkitchin/org-ref
(use-package org-ref
  :straight (org-ref :type git
                     :host github
                     :repo "jkitchin/org-ref")
  :after org)
#+end_src

** Org-QL

In order to query Org files with more flexibility, [[https://github.com/alphapapa/org-ql][org-ql]] can come to the rescue.

#+begin_src elisp :tangle init.el
;; https://github.com/alphapapa/org-ql
(use-package org-ql
  :straight (org-ql :type git
                    :host github
                    :repo "alphapapa/org-ql"))
#+end_src

In the most basic usage form you can basically run ~org-ql-search~ and just enter =todo= to get a basic listing.

* 👁️ Appearance

This section will deal with some of the visual trappings of Emacs. My design goal is to arrive at a rather minimal, or rather clean, design while providing the needed information scope perhaps through toggles (i.e.: showing whitespace characters at command).

** 🙈 Hide GUI Elements

In order to minimize visual noise, let's disable the graphical scroll bars, tool bars and menu bars.

#+begin_src elisp :tangle init.el
;; https://www.emacswiki.org/emacs/ScrollBar
(scroll-bar-mode -1)

;; https://www.emacswiki.org/emacs/ToolBar
(tool-bar-mode -1)

;; https://www.emacswiki.org/emacs/MenuBar
(menu-bar-mode -1)

;; https://www.emacswiki.org/emacs/ShowParenMode
(show-paren-mode 1)
#+end_src

** 🧱 Column Indicator

Display a border at the position to indicate where the right margin is drawn. This should provide authors a sense of where lines should be broken to keep the text relatively readable.

#+begin_src elisp :tangle init.el
;; https://www.emacswiki.org/emacs/FillColumnIndicator
(global-display-fill-column-indicator-mode 1)
#+end_src

#+begin_quote
💡 Even if we have extremely wide displays, reading is a lot easier if the text is width-constrained so do yourself a favor and don't write lines that are painfully long to read.
#+end_quote

** 🏷️ Show Line Numbers

For the sake of ease of navigation and spatial orientation we display line numbers in the left margin.

#+begin_src elisp :tangle init.el
;; https://www.emacswiki.org/emacs/LineNumbers
(global-display-line-numbers-mode 1)
#+end_src

** 🏳️ Whitespace

Visualize white spaces (tabs, spaces, trailing whitespace). The global whitespace mode can be toggled through =(global-whitespace-mode)= in order to reduce the visual noise or enable the whitespace indication.

#+begin_src elisp :tangle init.el
;; https://www.emacswiki.org/emacs/WhiteSpace
;; https://www.emacswiki.org/emacs?action=browse;oldid=WhitespaceMode;id=WhiteSpace
(setq whitespace-style '(empty face lines-tail tabs trailing))

;; http://ergoemacs.org/emacs/whitespace-mode.html
(global-whitespace-mode nil)
#+end_src

** 🎛️ Modeline

The modeline is the bar typically at the bottom of a buffer which provides useful information about the system.

Since the amount of textual information in the Modeline can get overwhelming at times, we provide shorted pictographic indicators in the Modeline instead.

#+begin_src elisp :tangle init.el
(use-package delight
  :straight (delight :type git
                     :host nil
                     :repo "https://git.savannah.nongnu.org/git/delight.git")
  :delight
  (auto-revert-mode "♻️")
  (eldoc-mode " el📖")
  (edebug-mode "🐞")
  (global-whitespace-mode)
  (visual-line-mode " 🌯")
  (mu4e-main-mode "📫")
  (mu4e-headers-mode "📬")
  (mu4e-view-mode "📧"))

(use-package diminish
  :disabled
  :straight (diminish :type git
                      :host github
                      :repo "myrjola/diminish.el"))
#+end_src

** 🔤 Text

*** Visual Fill Column

For the sake of readability, it helps to wrap text at a fixed column instead of filling up whatever screen real estate that is available to a buffer. The [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] package by Joost Kremers accomplishes just this and can be toggled by running ~(visual-fill-column-mode)~.

#+begin_src elisp :tangle init.el
;; https://github.com/joostkremers/visual-fill-column
(use-package visual-fill-column
  :straight (visual-fill-column :type git
                                :host github
                                :repo "joostkremers/visual-fill-column"))
#+end_src

#+CAPTION: Demonstration of toggling visual-fill-column mode
[[file:images/demonstration-visual-fill-column.gif]]

**** Global binding for convenience

For convenience, I have defined the following global binding to facilitate my laziness and avoid having to enter =visual-fill-column-mode= which isn't as much of a pain to begin with TBH if you consider that there is completion within Emacs. 🤷🏿‍♂️

#+begin_src elisp
(global-set-key (kbd "C-c v \\") 'visual-fill-column-mode)
#+end_src

*** Adaptive Wrap

By using [[https://elpa.gnu.org/packages/adaptive-wrap.html][adaptive wrap]] mode, wrapping behaviour can be adapted to respect indentation present at the start of a line. This should simply the readability of long lines in e-mail quotes or in nested code.

#+begin_src elisp :tangle init.el
;; https://elpa.gnu.org/packages/adaptive-wrap.html
(use-package adaptive-wrap
  :straight (adaptive-wrap :type git
                           :host github
                           :repo "emacs-straight/adaptive-wrap")
  :config
  (adaptive-wrap-prefix-mode))
#+end_src

Using adaptive wrapping along with visual-fill-column mode may introduce some performance issues especially when longer texts are being soft-wrapped. When dealing with code blocks or tables, adaptive wrapping can be a bit more confusing than helpful which is why it helps to define key bindings to simplify toggling this behaviour. In my case, I have defined the =vidbina/wrap= function to play to control =visual-line-mode= and =adaptive-wrap-mode= in a single operation.

*** Default Text Scale

For global text scaling, the [[https://github.com/purcell/default-text-scale][default-text-scale]] package can be used. Without this package, scaling may require one to resize the text in every buffer independently which is an arduous task.

#+begin_src elisp :tangle init.el
;; https://github.com/purcell/default-text-scale
;; Doesn't work well in emacsclient
(use-package default-text-scale
  :straight (default-text-scale :type git
                                :host github
                                :repo "purcell/default-text-scale")
  :hook
  (after-init . default-text-scale-mode)
  :init
  (add-hook 'server-after-make-frame-hook
            (lambda () (progn (message "🎨 Time to dress up the GUI")
                              (default-text-scale-reset)))))
#+end_src


** 🎨 Rainbow Mode

[[https://github.com/emacsmirror/rainbow-mode][Rainbow mode]] allows the coloring or color codes within buffers such as #ff0000 and #0f0.

#+begin_src elisp :tangle lang.example.el
;; https://github.com/emacsmirror/rainbow-mode
(use-package rainbow-mode
  :straight (rainbow-mode :type git
                          :host github
                          :repo "emacsmirror/rainbow-mode"))
#+end_src

** 💄 Themes

*** COMMENT Leuven Theme

#+begin_src elisp :tangle init.el
;; https://github.com/fniessen/emacs-leuven-theme
(use-package leuven-theme
  :straight (leuven-theme :type git
                          :host github
                          :repo "fniessen/emacs-leuven-theme"))
#+end_src

*** Modus Themes

In order to avoid overthinking themes, I've opted for Prot's [[https://gitlab.com/protesilaos/modus-themes][Modus themes]] which offers a highly readable color scheme from an accessibility perspective.

#+CAPTION: Screenshot of this Emacs configuration in dark-mode
[[file:images/screenshot-README-dark.png]]

#+CAPTION: Screenshot of this Emacs configuration in light-mode
[[file:images/screenshot-README-light.png]]

#+begin_src elisp :tangle init.el
;; https://gitlab.com/protesilaos/modus-themes
(use-package modus-themes
  :straight (modus-themes :type git
                          :host gitlab
                          :repo "protesilaos/modus-themes")
  :config
  (modus-themes-load-themes)
  :init
  (setq modus-themes-bold-constructs t
        modus-themes-mode-line '(3d accented)
        modus-themes-org-blocks 'gray-background
        modus-themes-region '(bg-only no-extend accented)
        modus-themes-prompts '(intense)
        modus-themes-fringes '(intense)
        modus-themes-hl-line '(accented)
        modus-themes-paren-match '(bold intense)
        modus-themes-syntax '(yellow-comments green-strings alt-syntax)
        modus-themes-headings '((1 . (background overline))
                                (2 . (background overline rainbow))
                                (t . (background overline rainbow)))
        modus-themes-scale-headings t))
#+end_src

** Dired-k

The standard Emacs directory editor named dired doesn't ship with convenient highlighting or coloring of the listed files. The dired-k package adds some flair to the dired ouput.

#+begin_src elisp :tangle init.el
;; https://github.com/emacsorphanage/dired-k
(use-package dired-k
  :straight (dired-k :type git
                     :host github
                     :repo "emacsorphanage/dired-k")
  :init
  (setq dired-k-style 'git)
  :config
  (add-hook 'dired-initial-position-hook 'dired-k))
#+end_src

* 🌷 Misc

** 🪟 Windows

*** 🏗️ Buffer Placement

#+begin_src elisp :tangle init.el
(setq display-buffer-alist
      (let* ((sidebar-width '(window-width . 85))
             (sidebar-parameters '(window-parameters . ((no-other-window . t))))
             (sidebar (list '(side . left) sidebar-width sidebar-parameters)))
        (list (cons (regexp-opt-group '("*org-roam*"))
                    (cons #'display-buffer-in-side-window
                          `((slot . 0) ,@sidebar)))
              (cons (regexp-opt-group '("*Dictionary*"))
                    (cons #'display-buffer-in-side-window
                          `((slot . -1) ,@sidebar)))
              (cons (regexp-opt-group '("*Help*" "*Info*" "*info*"))
                    (cons #'display-buffer-in-side-window
                          `((slot . 5) ,@sidebar)))
              (cons (regexp-opt-group '("*Shortdoc"))
                    (cons #'display-buffer-in-side-window
                          `((slot . 6) ,@sidebar)))
              (cons (regexp-opt-group '("*Warnings*"))
                    (cons #'display-buffer-in-side-window
                          `((slot . 10) ,@sidebar))))))
#+end_src

*** 🔍 Zoom-window: Zoom to a single window

In order to single out a particular window in order to return to the preceding layout shortly thereafter again, one may use the [[https://github.com/emacsorphanage/zoom-window][zoom-window]] package. It's a great way to clear some screen real estate and obtain some focus.

#+begin_src elisp :tangle init.el
;; https://github.com/emacsorphanage/zoom-window
(use-package zoom-window
  :straight (zoom-window :type git
                         :host github
                         :repo "emacsorphanage/zoom-window")
  :init
  (setq ;;zoom-window-use-persp t
   zoom-window-mode-line-color "DarkRed"))
#+end_src

*** 🪄 Ace Window

In order to quickly jump between windows by numbers, we can use the [[https://github.com/abo-abo/ace-window][ace-window]] package. This eliminates the need for the tedious next/previous window bindings (either native Emacs or evil).

#+begin_src elisp :tangle init.el
;; https://github.com/abo-abo/ace-window
;; https://jao.io/blog/2020-05-12-ace-window.html
(use-package ace-window
  :straight (ace-window :type git
                        :host github
                        :repo "abo-abo/ace-window")
  :bind (("M-o" . ace-window)))
#+end_src

*** Avy

In order to speed up text navigation, one can use [[https://github.com/abo-abo/avy][avy]] to produce jump points that one can navigate through single keystrokes.

In order to jump to bind in the snippet below, one can grep for bind which is often fast enough or... one can trigger ~(avy-goto-char)~, type =b= and then observe how the different occurrences of b provide an indication of the character (or sequence of characters) that we need to press to "teleport" to that location.

#+begin_src elisp :tangle init.el
;; https://github.com/abo-abo/avy
(use-package avy
  :straight (avy :type git
                 :host github
                 :repo "abo-abo/avy")
  :bind (("C-:" . avy-goto-char)))
#+end_src

** Find File at Point (FFAP)

In order to provide point-specific behavior, we use the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/FFAP.html#index-ffap][FFAP]] package. As an example, the ~(find-file-at-point)~ command will provide custom behavior depending on the type of link it is called over.

#+begin_src elisp :tangle init.el
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/FFAP.html#index-ffap
(ffap-bindings)
#+end_src

** Indentation

Turn of tab-indentation and opt for space-based indentation such that whitespace is a bit more controllable.

#+begin_src elisp :tangle init.el
;; https://www.gnu.org/software/emacs/manual/html_node/eintr/Indent-Tabs-Mode.html
(setq-default indent-tabs-mode nil)
#+end_src

#+begin_quote
⚠️ Not to append to ongoing flame wars: across different editors and viewers (pagers, terminals, etc) the use of spaces is a bit more predictable as a text alignment tool. 🤷🏿‍♂️
#+end_quote

** Scrolling

In order to [[https://www.emacswiki.org/emacs/SmoothScrolling][facilitate smoother scrolling]] than the default i.e.: "when scrolling out of view, scroll such that point is in the middle of the buffer", we set =scroll-conservatively= to allow for more line-by-line scrolling.

#+begin_src elisp :tangle init.el
;; https://www.emacswiki.org/emacs/SmoothScrolling
(setq-default scroll-conservatively 100)
#+end_src

💡 If you want to center the cursor (or point in Emacs vernacular), the ~evil-scroll-line-to-center~ command bound to =z z= is your friend.

** TODO Undo

#+begin_src elisp :tangle init.el
;; https://github.com/emacsmirror/undo-fu
(use-package undo-fu
  :straight (undo-fu :type git
                     :host github
                     :repo "emacsmirror/undo-fu"))
#+end_src

** TODO Async

#+begin_src elisp :tangle init.el
;; https://github.com/jwiegley/emacs-async
(use-package async
  :straight (async :type git
                   :host github
                   :repo "jwiegley/emacs-async"))
#+end_src

** 🖐️ Evil

In order to save your hand some pain, it may be helpful to use vi-like bindings that keep your hands around the home row more often and minimizes the need for your hands to pull acrobatic maneuvers 🎪 that could incur some strain. I use the [[https://github.com/emacs-evil/evil][extensible vi layer, inconveniently or mischievously abbreviated to Evil]], to help me to vi-bindings while in Emacs.

#+begin_quote
I used Emacs extensively in college and developed a case of the /Emacs pinky/ at the time. That's about the time I switched back to vi/vim and around the end of 2021, I decided to give Emacs another try in combination with Evil-mode which provides me the best of both worlds. 🤯
#+end_quote

#+begin_src elisp :tangle init.el
;; https://github.com/emacs-evil/evil
;; https://github.com/noctuid/evil-guide
(use-package evil
  :straight (evil :type git
                  :host github
                  :repo "emacs-evil/evil")
  :after
  undo-fu
  :init
  ;; https://github.com/emacs-evil/evil-collection#installation
  ;; pre-set some evil vars prior to package load
  (setq evil-respect-visual-line-mode t)
  (setq evil-undo-system 'undo-fu)
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  :config
  (evil-mode t)
  (evil-set-initial-state 'info-mode 'emacs)
  (evil-set-initial-state 'help-mode 'emacs)
  (evil-set-initial-state 'special-mode 'emacs))

;; https://github.com/emacs-evil/evil-collection
(use-package evil-collection
  :straight (evil-collection :type git
                             :host github
                             :repo "emacs-evil/evil-collection")
  :after evil
  :config
  (evil-collection-init)
  :delight
  (evil-collection-unimpaired-mode))
#+end_src

** Version Control

*** TODO Magit: Git Porcelain

#+begin_src elisp :tangle init.el
;; https://github.com/magit/magit.git
(use-package magit
  :straight (magit :type git
                   :host github
                   :repo "magit/magit"))
#+end_src

*** TODO Diff-hl: Diff highlighting in the left gutter of a buffer

#+begin_src elisp :tangle init.el
;; https://github.com/dgutov/diff-hl
(use-package diff-hl
  :straight (diff-hl :type git
                     :host github
                     :repo "dgutov/diff-hl")
  :hook
  (after-init . global-diff-hl-mode))
#+end_src

** 📁 Navigation

*** TODO Deft

#+begin_src elisp :tangle init.el
;; https://github.com/jrblevin/deft
(use-package deft
  :straight (deft :type git
                  :host github
                  :repo "jrblevin/deft")
  :after org
  :bind
  ("C-c n d" . deft)
  :custom
  (deft-directory "~/org")
  (deft-extensions '("md" "org"))
  (deft-recursive t)
  (deft-strip-summary-regexp
   (concat "\\("
           "[\n\t]" ;; blank
           "\\|^#\\+[[:alpha:]_]+:.*$" ;; org-mode metadata
           "\\)"))
  (deft-use-filename-as-title t)
  (deft-use-filter-string-for-filename t))
#+end_src

** Completion

*** Orderless

The [[https://github.com/oantolin/orderless][orderless]] package provides more generous completion resolution by permitting us to:
1. provide partial phrases and
2. enter these parts in any order -- hence /orderless/.

#+begin_src elisp :tangle init.el
(use-package orderless
  :straight (orderless :type git
                       :host github
                       :repo "oantolin/orderless")
  ;; Load after Swiper since we override ivy-re-builders-alist
  :after swiper
  :custom
  (completion-styles '(orderless))
  (ivy-re-builders-alist '((t . orderless-ivy-re-builder))))
#+end_src

*** TODO Vertico

*** Ivy, Swiper and Counsel

The [[https://github.com/abo-abo/swiper][swiper]] package, or rather repository, contains three packages actually being:
- Ivy :: a completion mechanism
- Swiper :: Ivy-enhanced Isearch
- Counsel :: Ivy-enhanced versions of common Emacs commands
  - =counsel-list-processes= :: Ivy-enchanced =list-processes=
  - =counsel-switch-buffer= :: Ivy-enchanced =switch-to-buffer=

#+begin_src elisp :tangle init.el
;; https://github.com/abo-abo/swiper
(use-package swiper
  :straight (swiper :type git
                    :host github
                    :repo "abo-abo/swiper")
  :delight
  (counsel-mode)
  (ivy-mode)
  :config
  (straight-use-package 'counsel)
  (ivy-mode +1)
  (counsel-mode +1)
  (setq ivy-use-virtual-buffers t
        enable-recursive-minibuffers t))
#+end_src

*** Which-key: Show key bindings next to command listing in pop-up

The [[https://github.com/justbur/emacs-which-key][which-key]] package annotes the command listing with the key bindings for the shown commands.

#+CAPTION: Screenshot of which-key diplaying some keybindings to commands listed in an expanded minibuffer in dark-mode
[[file:images/screenshot-which-key-dark.png]]

#+CAPTION: Screenshot of which-key diplaying keybindings to commands listed in an expanded minibuffer in light-mode
[[file:images/screenshot-which-key-light.png]]

#+begin_src elisp :tangle init.el
;; https://github.com/justbur/emacs-which-key
(use-package which-key
  :delight
  :straight (which-key :type git
                       :host github
                       :repo "justbur/emacs-which-key")
  :config
  (which-key-mode))
#+end_src

*** COMMENT Company: Completion framework with pluggable back-ends

The [[https://company-mode.github.io/][company]] completion framework allows for the use of backends such as [[https://github.com/tigersoldier/company-lsp][company-lsp]] (for LSP integration), BBRB, clang, Ispell, Etags, and Gtags. Completions are triggered through the ~(completion-at-point)~ function while the listing is presented in a pop-up or menu near the pointer itself.

#+begin_src elisp :tangle init.el
;; https://company-mode.github.io/
(use-package company
  :straight (company :type git
                     :host github
                     :repo "company-mode/company-mode")
  :config
  (add-hook 'after-init-hook 'global-company-mode)
  (define-key company-mode-map (kbd "TAB") #'company-indent-or-complete-common))
#+end_src

In case you are using company, the [[http://company-mode.github.io/manual/Getting-Started.html#Usage-Basics][Usage Basics]] page will provide a good walkthrough of the bindings, notable options being:
- =C-n= and =C-p= to navigate up and down the completions listing

** 📧 Mail

*** Mu4e

[[https://www.djcbsoftware.nl/code/mu/mu4e.html][Mu4e]] is Maildir-friendly mail client that uses mu as a backend.

#+begin_src elisp :tangle init.el
;; https://www.djcbsoftware.nl/code/mu/mu4e.html
(use-package mu4e
  :straight (:type built-in)
  :bind (("C-c m 4" . mu4e))
  :config
  (setq mail-user-agent 'mu4e-user-agent
        mu4e-compose-format-flowed t
        mu4e-context-policy 'always-ask
        mu4e-contexts (my/mu4e-contexts)
        mu4e-index-update-in-background t
        mu4e-view-show-addresses t)

  ;; https://www.djcbsoftware.nl/code/mu/mu4e/Retrieval-and-indexing.html#Speeding-up-indexing
  (setq mu4e-index-cleanup nil      ; don't do a full cleanup check
        mu4e-index-lazy-check t)    ; don't consider up-to-date dirs

  ;; https://www.djcbsoftware.nl/code/mu/mu4e/Retrieval-and-indexing.html#Example-setup
  (setq mu4e-get-mail-command "offlineimap"   ; or fetchmail, or ...
        mu4e-update-interval 300)             ; update every 5 minutes

  ;; https://www.djcbsoftware.nl/code/mu/mu4e/Attaching-files-with-dired.html
  (require 'gnus-dired)

  ;; make the `gnus-dired-mail-buffers' function also work on
  ;; message-mode derived modes, such as mu4e-compose-mode
  (defun gnus-dired-mail-buffers ()
    "Return a list of active message buffers."
    (let (buffers)
      (save-current-buffer
        (dolist (buffer (buffer-list t))
          (set-buffer buffer)
          (when (and (derived-mode-p 'message-mode)
                     (null message-sent-message-via))
            (push (buffer-name buffer) buffers))))
      (nreverse buffers)))

  (setq gnus-dired-mail-mode 'mu4e-user-agent)

  ;; https://www.djcbsoftware.nl/code/mu/mu4e/Dired.html
  (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode))
#+end_src

For convenience, remember to prefix the update command by entering it as =C-u u= in a *mu4e-main* buffer or by entering =C-u C-c C-u= from the *mu4e-headers* buffer such that the update commands *run in the background*.

The =dired-mode-hook= (see [[https://www.djcbsoftware.nl/code/mu/mu4e/Dired.html][Dired]]) enables us to use =C-c RET C-a= to attach files to new or existing mu4e emails.

**** Figure out indexing shortcut

#+begin_src elisp
(mu4e-context-switch nil nil)
(mu4e-update-index)
(mu4e-update-mail-and-index 'background)
#+end_src

#+RESULTS:

*** TODO Notmuch

- Leo Gaskin's [[https://github.com/leotaku/literate-emacs/blob/master/init.org#notmuch][notmuch config]]
- Mu4e, Gnus and Notmuch comparison thread on [[https://www.reddit.com/r/emacs/comments/ebite6/mu4e_vs_gnus_vs_notmuch_for_emacs_email/][reddit]]
- Jethro Kuan's (author of Org-roam) [[https://github.com/jethrokuan/.emacs.d/blob/master/init.el][notmuch config]]

#+begin_src elisp :tangle init.el
;; https://git.notmuchmail.org/git/notmuch
(use-package notmuch
  :straight (:type built-in)
  :if (executable-find "notmuch")
  :commands (notmuch
             notmuch-tree
             notmuch-search
             notmuch-hello)
  :bind (("C-c m n" . notmuch)
         :map notmuch-search-mode-map
         ("SPC" . vidbina/notmuch-toggle-inbox))
  :init
  (evil-collection-notmuch-setup)
  :config
  (notmuch-address-harvest)
  (add-hook 'notmuch-hello-mode-hook
            (lambda () (display-line-numbers-mode 0)))
  :custom
  (mail-envelope-from 'header)
  (mail-specify-envelope-from t)
  (message-kill-buffer-on-exit t)
  (message-send-mail-function 'message-send-mail-with-sendmail)
  (message-sendmail-envelope-from 'header)
  (message-sendmail-f-is-evil nil)
  (message-signature #'my/mail-sig)
  (notmuch-always-prompt-for-sender t)
  (notmuch-archive-tags '("-inbox" "-unread"))
  (notmuch-crypto-process-mime t)
  (notmuch-hello-sections '(notmuch-hello-insert-saved-searches))
  (notmuch-labeler-hide-known-labels t)
  (notmuch-message-headers '("Subject" "To" "Cc" "Bcc"))
  (notmuch-saved-searches my/notmuch-saved-searches)
  (notmuch-search-oldest-first nil)
  (sendmail-program (executable-find "msmtp"))
  :config
  (notmuch-address-harvest)
  (add-hook 'notmuch-hello-mode-hook
            (lambda () (display-line-numbers-mode 0))))
#+end_src

Notmuch has the following modes:
- *hello* which presents the starting page
- *search* which presents search results to a query
- *tree* which presents a thread and the message hierarchy
- *show* which presents the email

For insight into the evil bindings for notmuch, go have a look at the definition of ~evil-collection-notmuch-setup~ but for convenience, here are some bindings that you will likely rely on quite a bit:
- =cc= or =C= to compose mail with ~notmuch-mua-new-mail~ (like mu4e)
- =cR= reply
- =cf= forward
- === flag
- =+= add tag
- =-= remove tag
- =*= tag all
- =s= search
  - stash search in *search mode*
  - show stash in *show mode*
- =q= bury of kill buffer
- =g?= help or version information at notmuch-hello view
- =p= ~notmuch-show-save-attachments~ (like mu4e)
- =gd= goto address at point

** TODO 🕳️ Terminals and Shells 🐚

*** COMMENT vterm

#+begin_src elisp :tangle init.el
(use-package vterm :straight nil)
#+end_src

*** COMMENT multi-vterm

#+begin_src elisp :tangle init.el
(use-package multi-vterm
  :straight (multi-vterm :type git
                         :host github
                         :repo "suonlight/multi-vterm")
  :config
  ;;(add-hook 'vterm-mode-hook
  ;;          (lambda ()
  ;;            (setq-local evil-insert-state-cursor 'box)
  ;;            (evil-insert-state)))
  (define-key vterm-mode-map [return]                      #'vterm-send-return)

  (setq vterm-keymap-exceptions nil)
  (evil-define-key 'insert vterm-mode-map (kbd "C-e")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-f")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-a")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-v")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-b")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-w")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-u")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-n")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-m")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-p")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-j")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-k")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-r")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-t")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-g")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-c")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-SPC")    #'vterm--self-insert)
  (evil-define-key 'normal vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
  (evil-define-key 'normal vterm-mode-map (kbd ",c")       #'multi-vterm)
  (evil-define-key 'normal vterm-mode-map (kbd ",n")       #'multi-vterm-next)
  (evil-define-key 'normal vterm-mode-map (kbd ",p")       #'multi-vterm-prev)
  (evil-define-key 'normal vterm-mode-map (kbd "i")        #'evil-insert-resume)
  (evil-define-key 'normal vterm-mode-map (kbd "o")        #'evil-insert-resume)
  (evil-define-key 'normal vterm-mode-map (kbd "<return>") #'evil-insert-resume))
#+end_src

** 📕 PDF

*** TODO PDF-Tools

#+begin_src elisp :tangle init.el
(use-package pdf-tools
  :straight nil
  :config
  (require 'pdf-occur)
  (pdf-tools-install nil t nil nil)
  (setq-default pdf-view-display-size 'fit-width))
#+end_src

** 📑 Project Management

In order to manage projects more conveniently, one can opt for a variety of project management packages. In this section we configure and explain some of the options that I've relied on over time.

*** project.el

First and foremost, project.el (bundled with Emacs) provides some facilities to switch between projects, explore project trees and execute commands (among other features). The project.el bindings are mapped to =C-x p=.

The following links provide some context that can be helpful in helping inform your decision to learn project.el or projectile (or its derivatives):
- [[https://www.reddit.com/r/emacs/comments/nf2k5y/how_does_projectile_compare_to_the_builtin/][How does projectile compare to the built-in project.el? (reddit)]]
- [[https://www.manueluberti.eu/emacs/2020/09/18/project/][It’s never too late (Manuel Uberti)]]

*** Projectile

[[https://github.com/bbatsov/projectile/][Projectile]] simplifies working by projects by providing some bindings that infer their behavior from a project-type. This means that we can remember single bindings expore our project trees as well as triggering [[https://docs.projectile.mx/projectile/projects.html#configure-a-projects-lifecycle-commands][project lifecycle commands]] such as configure, compile and run test, and use these generalizations across projects -- allowing ourselves to forget some project-specific details. 😌

#+begin_src elisp :tangle init.el
;; https://github.com/bbatsov/projectile/
(use-package projectile
  :straight (projectile :type git
                        :host github
                        :repo "bbatsov/projectile")
  :custom
  (projectile-mode-line-prefix "🗄️")
  :hook
  (after-init . projectile-mode)
  :bind (:map projectile-mode-map
              ("C-x p" . projectile-command-map)))
#+end_src

We configure Projectile by
1. most generally, [[https://docs.projectile.mx/projectile/projects.html#adding-custom-project-types][defining new project types]] or
2. more specifically, populating the .dir-locals.el file with our needed [[https://docs.projectile.mx/projectile/configuration.html][Projectile configuration]] or [[https://docs.projectile.mx/projectile/projects.html#storing-project-settings][project settings]].

We use =C-x p= as the binding prefix projectile deciding to overide the project.el bindings 🙊:
- =C-x p P= to trigger a test command using ~(projectile-test-project)~
- =C-x p != to run a one-off shell command using ~(projectile-run-shell-command-in-root)~
- =C-x p x s= run a shell ~(projectile-run-shell)~ (will jump to already running shell unless prefixed)

**** Defining Projectile lifecycle commands dir-locals.el

Look at =projectile-cache-current-file= on tips to implementing file-specific Projectile commands.

The following snippet is a rough example of a Projectile lifecycle command that performs an operation on the currently open file.

#+begin_src elisp
((nil . ((projectile-project-test-cmd . (lambda ()
                                          (shell-command (format "exercism submit %S" (file-truename (buffer-file-name))))
                                          (message "Ran test"))))))
#+end_src

For some reason, changing the .dir-locals.el file requires a reset of the corresponding map which, in the case above, happens to be the =projectile-test-cmd-map=. This hashmap can be reset by navigating to the source where is is defined and reevaluating the defining sexpr.

*** COMMENT Perspective

The [[https://github.com/nex3/perspective-el][Perspective]] package provides some conveniences to manage different workspaces. I use perspectives to keep buffers and layouts isolated between different contexts e.g.: sometimes projects, sometimes features, sometimes tasks (e.g.: wedding planning notes and emails, 1-on-1 work-related notes and details, notes and buffers on a particular research topic, etc.).

#+begin_src elisp :tangle init.el
;; https://github.com/nex3/perspective-el
(use-package perspective
  :straight (perspective :type git
                         :host github
                         :repo "nex3/perspective-el")
  :bind (("C-x C-b" . persp-ivy-switch-buffer)
         ("C-x k" . persp-kill-buffer*))
  :config
  (persp-mode t)
  :init
  (setq persp-state-default-file "~/.emacs.d/perspective"
        persp-modestring-short t))
#+end_src

*** persp-mode

Unlike [[*Perspective][Perspective]], [[https://github.com/Bad-ptr/persp-mode.el][persp-mode]] allows us to manage /perspectives/ across frames (i.e.: different desktop windows for Emacs). In my usage of Emacs, this was becoming more of a requirement since I often end up opening Emacs frames where I want the convenience of selecting either of the /perspectives/ that have been curated before. The [[https://github.com/nex3/perspective-el#similar-packages][Perspective documentation]] provides a helpful writeup of the alternative solutions available for perspective-management in Emacs which includes persp-mode.

#+begin_src elisp :tangle init.el
;; https://github.com/Bad-ptr/persp-mode.el
(use-package persp-mode
  :straight (persp-mode :type git
                        :host github
                        :repo "Bad-ptr/persp-mode.el")
  :config
  (persp-mode t))
#+end_src

The use of persp-mode should not be too challenging since it is forked from the trusted and familiar Perspective.

Here are some of the relevant bindings to remember, provided that =persp-keymap-prefix= is set to the default =C-c p=:
- =C-c p s= *switch* to perspective (existing or new)
- =C-c p S= *switch* to perspective in a window
- =C-c p n= *next* perspective
- =C-c p p= *previous* perspective
- =C-c p r= *rename* perspective
- =C-c p w= *write* perspectives to file
- =C-c p l= *load* perspectives from file
- =C-c p o= turn *off* perspective mode
- =C-c p k= kill buffer from perspective
- =C-c p K= *kill* buffer

Killing a buffer through =C-x k= will only kill the buffer if it is only member of the current perspective i.e.: a buffer that is a member of multiple perspectives will only be removed from the current perspective when the ~kill-buffer~ command is invoked.

* 🏁 Finale

To keep our init as general as possible we store private information and language configurations in separate files since these are inherently personal concerns. This configuration will try to load [[file:lang.el]] and [[file:personal.el]] if these exist.

#+begin_src elisp :tangle init.el
(load "~/.emacs.d/lang.el")
(load "~/.emacs.d/personal.el")
#+end_src

Furthermore we load customization since some configurations and changes to our Emacs setup will be persisted through the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][customization system]].

#+begin_src elisp :tangle init.el
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+end_src

* 📛 Personal Details

#+begin_quote
💡 You can copy the content in this section to your own personal.org file in this directory and configure all the =:tangle= arguments to output to =personal.el= to cook up your own personal part of your configuration through literal programming. Remember that you can tangle an Org-file into the resulting code with the ~(org-babel-tangle)~ command (mapped to =C-c C-v t= by default).
#+end_quote

Populate a =personal.el= file which defines your name, your e-mail details and some other /very personal/ configuration bits such as theme customizations or personalized keybindings. Use the following snippet as an example of a configuration that may work.

#+begin_src elisp :tangle personal-example.el
(setq user-full-name "David Asabina"
      inhibit-startup-screen t
      smtpmail-debug-info t
      message-send-mail-function 'message-send-mail-with-sendmail)
#+end_src

** COMMENT Reenable some disabled commands

In order to meet new Emacs users half-way in terms of UX, some features/commands have been [[https://www.emacswiki.org/emacs/DisabledCommands][disabled by default]]. The [[https://www.emacswiki.org/emacs/BasicNarrowing][narrowing]] functionality allows one to narrow a buffer to a subset of it's original content. In Org-mode I often narrow to a chapter (subtree in an Org document) in order to reduce my context a bit (reduce the noise and enhance my focus). So, let's reenable some of the disabled commands needed for narrowing.

#+begin_src elisp :tangle personal-example.el
(put 'narrow-to-region 'disabled nil)
(put 'narrow-to-page 'disabled nil)
#+end_src

** Org-capture Templates

#+begin_src elisp :noweb yes :tangle personal-example.el
(setq org-capture-templates
      (list
       <<my-org-capture-templates>>
       nil))
#+end_src

Because templates expressed as string literals are difficult to read, debug and edit, we opt for a form that more closely represents the visual form that our templates will take on (i.e.: show real whitespacing for structure). The snippets in this section are tangled into real Org files which are referred to when setting =org-capture-template=.

⚠️ Please keep in mind that this section tangles into the absolute the relative path =templates/= which can wreak havoc on your setup if you already have files in that directory that you will need.

#+begin_src org :tangle templates/default.org
,* %^{Title}

Source: %u, %c

%i
#+end_src

Which can be configured using the following template entry:

#+begin_src elisp :noweb-ref my-org-capture-templates
(list "w" "Default Template" 'entry
      '(file+headline "~/org/protocol/capture.org" "Notes")
      `(file ,(expand-file-name "templates/default.org"))
      :empty-lines 1)
#+end_src

**** TODOs

#+begin_src org :tangle templates/todo.org
,* TODO %?

%i

%a
#+end_src

#+begin_src elisp :noweb-ref my-org-capture-templates
(list "t" "Todo" 'entry
      '(file+headline "~/org/todo.org" "Tasks")
      `(file ,(expand-file-name "templates/todo.org")))
#+end_src

**** Links

***** Capture template for a basic Link

For links we define the basic template:

#+begin_src org :tangle templates/link.org
,* TODO Read _%:description_

Source: %:annotation%?
#+end_src

Which we map to =L=:

#+begin_src elisp :noweb-ref my-org-capture-templates
(list "L" "Link Only" 'entry
      '(file+headline "~/org/protocol/capture.org" "Links")
      `(file ,(expand-file-name "templates/link.org"))
      :empty-lines 2)
#+end_src

***** Capture template for Link with Text

For links with additional text we define the template:

#+begin_src org :tangle templates/link-with-text.org
,* TODO Read %^{title}

Source: %:annotation

#+BEGIN_QUOTE
%i
#+END_QUOTE%?
#+end_src

which we map to =p=:

#+begin_src elisp :noweb-ref my-org-capture-templates
(list "p" "Link with Selected Text" 'entry
      '(file+headline "~/org/protocol/capture.org" "Links")
      `(file ,(expand-file-name "templates/link-with-text.org"))
      :empty-lines 2)
#+end_src

** Email

*** Citation line

In order to keep things lean, I've defined my own citation line that easy enough to parse as opposed to the default line.

#+begin_src elisp :tangle personal-example.el
(setq message-citation-line-format "On %d.%m.%Y, %f wrote:\n"
      message-citation-line-function #'message-insert-formatted-citation-line)
#+end_src

*** COMMENT 📧 Mu4e

In order to get mail to work for multiple mailboxes you will need to configure [[https://www.djcbsoftware.nl/code/mu/mu4e/Contexts.html][mu4e contexts]]. Refer to the [[https://www.djcbsoftware.nl/code/mu/mu4e/Contexts-example.html][examples]] in the documentation for some guidance on how to define contexts.

#+begin_src elisp :tangle personal-example.el
;; TODO fill in the blanks for mu4e-contexts
(setq mu4e-contexts `())
#+end_src

**** Signing

#+begin_src elisp :tangle personal-example.el
(add-hook 'mu4e-compose-mode-hook 'mml-secure-sign-pgpmime)
#+end_src

**** HTML Mail Escape-hatch

In order to conveniently view HTML mail which may not always be presented in a pleasantly readable manner inside of E-macs, you may appreciate using the escape hatch and viewing such pages in a proper browser. The view-actions menu can be pulled up by executing ~(mu4e-view-action)~ or pressing =A= while in the mu4e mail view.

#+begin_src elisp :tangle personal-example.el
;; https://www.djcbsoftware.nl/code/mu/mu4e/Reading-messages.html
(add-to-list 'mu4e-view-actions
             '("ViewInBrowser" . mu4e-action-view-in-browser) t)
#+end_src

#+begin_quote
💡 Since there is so much trash hidden in HTML mails (e.g.: pixels), I tend to paste (and follow) these links in private, incognito or profile-isolated browser tabs instead. Perhaps something you can consider if you you're not in the mood to be too generous (or nonchalant) with your data.
#+end_quote

*** Notmuch

https://notmuchmail.org/emacstips/

#+begin_src elisp
(autoload 'gnus-alias-determine-identity "gnus-alias" "" t)
(add-hook 'message-setup-hook 'gnus-alias-determine-identity)
#+end_src

#+begin_src elisp
(setq my/notmuch-saved-searches
      '((:name "inbox" :query "tag:inbox" :key "i")
        (:name "unread" :query "tag:unread" :key "u")
        (:name "flagged" :query "tag:flagged" :key "f")
        (:name "sent" :query "tag:sent" :key "t")
        (:name "drafts" :query "tag:draft" :key "d")
        (:name "all mail" :query "*" :key "a")))
#+end_src

#+begin_src elisp
(defun my/mail-sig ()
  "Returns signature based on From field"
  (let ((from-field (message-field-value "From")))
    (message "Trying out signature for %S" from-field)
    (pcase (or from-field "")
      ((pred (vidbina/mail-sig-match "@asabina.de"))
       (vidbina/mail-sig-file "/home/vidbina/mutt-setup/accounts/asabina-gmbh.sig"))
      ((pred (vidbina/mail-sig-match "@bina.me"))
       (vidbina/mail-sig-file "/home/vidbina/mutt-setup/accounts/vidbina.sig"))
      (_ (format "\n\n-- \nBe kind! 🤗")))))
#+end_src

** 🥳 Personal Helpers

Here be dragons! 🐉 This is my personal collection of helpers that I use for little things like switching themes, managing wrapping inside of buffers, managing opening of URL's and more junk. I will not explain these as these are simple enough and I'm not expecting me needing to explain this to myself or others (you likely will want to write your own).

#+begin_src elisp :tangle personal-example.el
(defcustom vidbina/theme-should-be-dark nil
  "Non-nil means that the theme should be dark"
  :type 'boolean
  :group 'display)

(defun vidbina/theme-switch-to-choice ()
  "Switch to the theme of choice"
  (if vidbina/theme-should-be-dark
      (vidbina/theme-switch-to-dark)
    (vidbina/theme-switch-to-light)))

(defun vidbina/theme-switch-to-dark ()
  "Switch to the dark theme"
  (interactive)
  (modus-themes-load-vivendi)
  (setq org-format-latex-options
        `(:scale 2 :foreground "White" :background "Transparent"))
  (message "🌑 Theme is dark")
  (customize-save-variable 'vidbina/theme-should-be-dark t))

(defun vidbina/theme-switch-to-light ()
  "Switch to the light theme"
  (interactive)
  (modus-themes-load-operandi)
  (setq org-format-latex-options
        `(:scale 2 :foreground "Black" :background "Transparent"))
  (message "🌕 Theme is light")
  (customize-save-variable 'vidbina/theme-should-be-dark nil))

(defun vidbina/theme-toggle ()
  "Toggle theme"
  (interactive)
  (if vidbina/theme-should-be-dark
      (vidbina/theme-switch-to-light)
    (vidbina/theme-switch-to-dark)))

(add-hook 'server-after-make-frame-hook 'vidbina/theme-switch-to-choice)

(defun vidbina/local-org-export-use-babel-toggle ()
  "Toggle buffer-local org-export-use-babel"
  (interactive)
  (if org-export-use-babel
      (setq-local org-export-use-babel nil)
    (setq-local org-export-use-babel t))
  (message (format "❓ org-export confirm = %s" org-export-use-babel)))

(defun vidbina/local-org-confirm-babel-evaluate ()
  "Toggle buffer-local org-confirm-babel-evaluate"
  (interactive)
  (if org-confirm-babel-evaluate
      (setq-local org-confirm-babel-evaluate nil)
    (setq-local org-confirm-babel-evaluate t))
  (message (format "☑️ Org Babel confirmation is %s" org-confirm-babel-evaluate)))

(defun vidbina/wrap ()
  "Toggle wrapping using adaptive-wrap-prefix-mode and visual-line-mode"
  (interactive)
  (let ((vidbina/wrap-set
         (lambda (state)
           (progn
             (if state
                 (progn
                   (visual-line-mode +1)
                   (adaptive-wrap-prefix-mode +1))
               (visual-line-mode -1)
               (adaptive-wrap-prefix-mode -1))
             (setq-local vidbina/wrap--state state)
             (message (format "🎁 state=%s wrap -> %s and line -> %s" state adaptive-wrap-prefix-mode visual-line-mode))))))
    (unless (boundp 'vidbina/wrap--state)
      (setq-local vidbina/wrap--state nil))
    (funcall vidbina/wrap-set (not vidbina/wrap--state))))

;; https://stackoverflow.com/questions/12663061/emacs-auto-scrolling-log-buffer
(defun vidbina/tail-buffer ()
  (setq-local window-point-insertion-type t))

(defun vidbina/browse-url-xsel (url &optional ignored)
  (shell-command (format "echo \"%s\" | xsel -ib" url)))

(setq browse-url-browser-function 'vidbina/browse-url-xsel)

(setq whitespace-style '(trailing tabs newline tab-mark newline-mark))

(defun vidbina/browse-to-current-file-after-safe-hook ()
  "Open saved HTML file with default browser"
  (progn
    (when (derived-mode-p 'html-mode)
      (progn
        (message (concat "Browse " buffer-file-name))
        (browse-url (file-truename buffer-file-name))))))

(defun vidbina/notmuch-toggle-inbox ()
  "toggle inbox tag of message"
  (interactive)
  (if (member "inbox" (notmuch-search-get-tags))
      (notmuch-search-tag (list "-inbox"))
    (notmuch-search-tag (list "+inbox"))))

(evil-collection-define-key 'normal 'notmuch-search-mode-map
  "i" 'vidbina/notmuch-toggle-inbox)


(defun vidbina/mail-sig-match (pattern from)
  "Matches From field to a regex"
  (string-match-p pattern from))

(defun vidbina/mail-sig-file (path)
  "Retrieves a signature text by path"
  (format "\n\n-- \n%s" (with-temp-buffer
                          (insert-file-contents path)
                          (buffer-string))))
#+end_src

** TODO Misc

#+begin_src elisp :tangle personal-example.el
(global-set-key (kbd "C-c v l") 'vidbina/theme-switch-to-light)
(global-set-key (kbd "C-c v d") 'vidbina/theme-switch-to-dark)
(global-set-key (kbd "C-c v TAB") 'vidbina/wrap)
(global-set-key (kbd "C-c v \\") 'visual-fill-column-mode)
(global-set-key (kbd "C-c v SPC") 'global-whitespace-mode)
(global-set-key (kbd "C-c v c") 'completion-at-point)
(global-set-key (kbd "C-c v (") 'paredit-mode)
(global-set-key (kbd "C-c v O") 'vidbina/orui-node-zoom-padding-set)
(global-set-key (kbd "C-c v _") 'vidbina/tail-buffer)
(global-set-key (kbd "C-c v .") 'vidbina/orui-node-zoom)

(global-set-key (kbd "C-c v z") 'zoom-window-zoom)

(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)

(setq fill-column 1)

;; https://orgmode.org/manual/Handling-Links.html
(setq org-return-follows-link t)

(setq org-log-into-drawer "LOGBOOK")

;; Allow for resizing of images
(setq org-image-actual-width nil)

(setq org-html-head-extra
      "<link rel=\"alternate stylesheet\" type=\"text/css\" href=\"~/org/style.css\" />")
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Position-Info.html
(setq column-number-mode t)

;; https://joy.pm/post/2017-09-17-a_graphviz_primer/
(defun my/fix-inline-images ()
  (when org-inline-image-overlays
    (org-redisplay-inline-images)))

(add-hook 'org-babel-after-execute-hook 'my/fix-inline-images)

;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Variables.html
;; http://emacs-fu.blogspot.com/2011/08/customizing-mode-line.html
(setq-default mode-line-format
              (list
               "%e"
               ;; ** when modified
               ;; -- if not modified
               ;; %% when read-only
               ;; %+ read-only but modified
               mode-line-modified
               mode-line-frame-identification
               mode-line-buffer-identification
               ;;(propertize mode-name :foreground (modus-themes-color 'magenta-alt))
               ;; https://evil.readthedocs.io/en/latest/overview.html?highlight=mode-line#modes-and-states
               ;; <N> normal state
               ;; <I> insert state
               ;; <V> visual state
               ;; <R> replace state
               ;; <O> operator-pending state
               ;; <M> motion state
               ;; <E> emacs state
               ;;evil-mode-line-tag
               ;; see more on modus-themes colors
               ;; https://github.com/protesilaos/modus-themes/blob/main/modus-themes.el#L436
               ;;'(:propertize mode-name 'face (list :background (modus-themes-color 'green-intense-bg)
               ;;                                        :foreground (modus-themes-color 'fg-main)))
               " "
               ;;'(:propertize '(:eval (persp-current-name)) 'face (list :background (modus-themes-color 'yellow-intense-bg)))
               ;;(propertize (apply #'concat (persp-mode-line))
               ;;            ;;'face (list :background (modus-themes-color 'red-intense-bg))
               ;;            )
               ;;" "
               ;;mode-line-end-spaces
               ;;;;'(:eval (propertize mode-line-misc-info 'face `(:background ,(modus-themes-color 'yellow-nuanced-bg) :foreground ,(modus-themes-color 'yellow-nuanced-fg))))
               ;;;;'(:eval (propertize "x " 'face '(:background "black" :foreground "#FF8800")))
               ;;;; TODO right align
               ;;;; https://blog.tygr.info/emacs/mode-line
               ;;;; https://emacs.stackexchange.com/questions/5529/how-to-right-align-some-items-in-the-modeline
               ;;;;(propertize "%P" 'face 'font-lock-string-face)
               " "
               (propertize "(%l,%c)%p"
                           ;;'face (list :background (modus-themes-color 'blue-intense-bg))
                           )
               ;;" "
               ;;(propertize "%I"
               ;;            ;;'face (list :background (modus-themes-color 'yellow-intense-bg))
               ;;            )
               ;;" "
               mode-line-modes
               ""))
#+end_src

** Security

*** Org-crypt

In order to [[https://orgmode.org/worg/org-tutorials/encrypting-files.html][encrypt entries of Org files]], the package org-crypt needs to be configured.

#+begin_src elisp :tangle personal-example.el
(require 'org-crypt)
(org-crypt-use-before-save-magic)
#+end_src

**** Usage

Usage of org-crypt is as simple as tagging the heading of a section to be encrypted with =:crypt:=. With the =org-crypt-key= variable set to =nil=, symmetric encryption is used. By setting this variable to a string, or by setting the =CRYPTKEY= property as demonstrated below, we can encrypt against a GPG public key of choice.

#+begin_example org
,* For all eyes

This is nothing special

,* For my eyes only :crypt:
:PROPERTIES:
:CRYPTKEY: 0xffffffffffffffffffffffffffffffffffffffff
:END:

This would be encrypted upon safe 😉

,* Local File Variables

Disable auto-save since I'm using crypt in this file.

# Local Variables:
# auto-save-default: nil
# End:
#+end_example

****** TODO Verify if =epa-file-encrypt-to= works as expected

An alternate approach would be to append the =epa-file-encrypt-to= variable to the local variables list. The benefit of this is that one can encrypt a file for multiple recipients. I haven't tested this yet. 🤔

* 💬 Languages

Populate a =lang.el= file which defines all of the major-modes and language-related tooling that are relevant to you. In my case I have simply defined a symlink from [[file:lang.example.el][lang.example.el]] to lang.el. The literal configuration in this section defines my own languages setup. YMMV! 🤷🏿‍♂️

** Natural Language

*** Spell Checking

#+begin_src elisp :tangle lang.example.el
;; https://200ok.ch/posts/2020-08-22_setting_up_spell_checking_with_multiple_dictionaries.html
(with-eval-after-load "ispell"
  (setq ispell-program-name "hunspell")
  ;; Configure German, Swiss German, and two variants of English.
  (setq ispell-dictionary "en_US,de_DE,nl")
  ;; ispell-set-spellchecker-params has to be called
  ;; before ispell-hunspell-add-multi-dic will work
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic ispell-dictionary)
  ;; For saving words to the personal dictionary, don't infer it from
  ;; the locale, otherwise it would save to ~/.hunspell_de_DE.
  (setq ispell-personal-dictionary "~/.hunspell_personal")

  ;; The personal dictionary file has to exist, otherwise hunspell will
  ;; silently not use it.
  (unless (file-exists-p ispell-personal-dictionary)
    (write-region "" nil ispell-personal-dictionary nil 0)))
#+end_src

** Markup Languages

*** COMMENT Org

#+begin_src elisp :tangle lang.example.el
;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Hooks-for-Loading.html
;; https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-gnuplot.html#sec-4
(with-eval-after-load 'org
  (message "Loading org-babel-language mappings")
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((shell . t)
                                 (clojure .  t)
                                 (gnuplot . t)
                                 (haskell . t)
                                 (makefile . t)
                                 ;; (nix . t) ;; TODO: Figure out why broken
                                 (python . t))))
#+end_src

*** Markdown

#+begin_src elisp :tangle lang.example.el
;; https://jblevins.org/projects/markdown-mode/
(use-package markdown-mode
  :straight (markdown-mode :type git
                           :host github
                           :repo "jrblevin/markdown-mode")
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init
  (setq markdown-command "multimarkdown"))
#+end_src

** Serialization Languages/Formats

*** JSON

[[https://github.com/joshwnj/json-mode][JSON-mode]] provides a major-mode and some keybindings to simplify working with JSON.

#+begin_src elisp :tangle lang.example.el
;; https://github.com/joshwnj/json-mode
(use-package json-mode
  :straight (json-mode :type git
                       :host github
                       :repo "joshwnj/json-mode"))
#+end_src

Some of the relevant keybindings are:
- =C-c C-f= format region or buffer with =json-reformat=
- =c-c P= copy path to object at point to the kill ring

**** JSON Reformat

[[https://github.com/gongo/json-reformat][JSON Reformat]] provides convenience helpers to reformat JSON in string or region.

#+begin_src elisp :tangle lang.example.el
;; https://github.com/gongo/json-reformat
(use-package json-reformat
  :straight (json-reformat :type git
                           :host github
                           :repo "gongo/json-reformat")
  :custom
  (json-reformat:indent-width 2 "Keep a short indentation span to simplify reading of deep structures"))
#+end_src

**** JSON Snatcher: Extract Element Paths within a JSON Structure

[[https://github.com/Sterlingg/json-snatcher][JSON Snatcher]] allows extraction of "addresses" or "paths" to an item within a JSON structure i.e.: /snatching/.

#+begin_src elisp :tangle lang.example.el
;; https://github.com/Sterlingg/json-snatcher
(use-package json-snatcher
  :straight (json-snatcher :type git
                           :host github
                           :repo "Sterlingg/json-snatcher"))
#+end_src

*** YAML

#+begin_src elisp :tangle lang.example.el
;; https://github.com/yoshiki/yaml-mode
(use-package yaml-mode
  :straight (yaml-mode :type git
                       :host github
                       :repo "yoshiki/yaml-mode"))
#+end_src

** Viz Languages for graphing, plotting and more

*** PlantUML

#+begin_src elisp :tangle lang.example.el
;; https://github.com/skuro/plantuml-mode
(use-package plantuml-mode
  :straight (plantuml-mode :type git
                           :host github
                           :repo "skuro/plantuml-mode")
  :config
  (setq plantuml-default-exec-mode 'executable)
  (add-to-list 'org-babel-load-languages '(plantuml . t)))
#+end_src

*** Graphviz

#+begin_src elisp :tangle lang.example.el
;; https://github.com/ppareit/graphviz-dot-mode
(use-package graphviz-dot-mode
  :straight (graphviz-dot-mode :type git
                               :host github
                               :repo "ppareit/graphviz-dot-mode")
  :config
  (setq graphviz-dot-indent-width 2)
  (add-to-list 'org-babel-load-languages '(dot . t)))
#+end_src

*** Gnuplot

#+begin_src elisp :tangle lang.example.el
;; https://github.com/emacsorphanage/gnuplot
;; also https://github.com/bruceravel/gnuplot-mode
;; also https://github.com/rudi/gnuplot-el
(use-package gnuplot
  :straight (gnuplot :type git
                     :host github
                     :repo "emacsorphanage/gnuplot")
  :config
  (add-to-list 'org-babel-load-languages '(gnuplot . t)))
#+end_src

** DSL

*** Dockerfile

#+begin_src elisp :tangle lang.example.el
;; https://github.com/spotify/dockerfile-mode
(use-package dockerfile-mode
  :straight (dockerfile-mode :type git
                             :host github
                             :repo "spotify/dockerfile-mode"))
#+end_src

*** Octave

[[https://www.gnu.org/software/emacs/manual/html_mono/octave-mode.html][Octave]] mode provides support for the [[https://www.gnu.org/software/octave/][Octave scientific programming language]] which is a popular FLOSS alternative to Matlab. From a glance at the [[https://github.com/emacs-mirror/emacs/commit/be64c05d81d6191397fa96e050b8b3ad8134b62b][Emacs git history]] it seems that this feature has been bundled in emacs for a while now, so we will simply assume it's here and add the language to the =org-babel-load-languages= list to enable Org Babel exports.

#+begin_src elisp :tangle lang.example.el
(add-to-list 'org-babel-load-languages '(octave . t))
#+end_src

** Programming Languages

*** Nix

#+begin_src elisp :tangle lang.example.el
;; https://github.com/NixOS/nix-mode
(use-package nix-mode
  :straight (nix-mode :type git
                      :host github
                      :repo "NixOS/nix-mode")
  :init
  (setq nix-nixfmt-bin "nixpkgs-fmt"))
#+end_src

*** Go (Golang)

#+begin_src elisp :tangle lang.example.el
;; https://github.com/dominikh/go-mode.el
(use-package go-mode
  :straight (go-mode :type git
                     :host github
                     :repo "dominikh/go-mode.el"))
#+end_src

*** Java

#+begin_src elisp :tangle lang.example.el
;; https://emacs-lsp.github.io/lsp-java/
(use-package lsp-java
  :straight (lsp-java :type git
                      :host github
                      :repo "emacs-lsp/lsp-java"))
#+end_src

*** Clojure

#+begin_src elisp :tangle lang.example.el
;; https://github.com/clojure-emacs/clojure-mode
(use-package clojure-mode
  :straight (clojure-mode :type git
                          :host github
                          :repo "clojure-emacs/clojure-mode")
  :config
  (require 'ob-clojure))
#+end_src

**** COMMENT IDE Helper

#+begin_src elisp :tangle lang.example.el
;; https://github.com/clojure-emacs/cider
(use-package cider
  :straight (cider :type git
                   :host github
                   :repo "clojure-emacs/cider")
  :config
  (setq org-babel-clojure-backend 'cider
        cider-lein-parameters "with-profile -user repl :headless :host localhost"))
#+end_src

*** Kotlin

#+begin_src elisp :tangle lang.example.el
;; https://github.com/Emacs-Kotlin-Mode-Maintainers/kotlin-mode
(use-package kotlin-mode
  :straight (kotlin-mode :type git
                         :host github
                         :repo "Emacs-Kotlin-Mode-Maintainers/kotlin-mode"))
#+end_src

*** Swift

#+begin_src elisp :tangle lang.example.el
;; https://github.com/swift-emacs/swift-mode
(use-package swift-mode
  :straight (swift-mode :type git
                        :host github
                        :repo "swift-emacs/swift-mode"))
#+end_src

*** Haskell

In order to conveniently read and write Haskell, I rely on [[https://github.com/haskell/haskell-mode][haskell-mode]]. Note that [[https://gitlab.com/tseenshe/haskell-tng.el][haskell-tng]] is a fork from haskell-mode that may be worth looking into in your case. read the [[http://haskell.github.io/haskell-mode/manual/latest/][manual]] for more information.

In order to configure interactive mode, we follow the [[https://haskell.github.io/haskell-mode/manual/latest/Interactive-Haskell.html#Customizations][setup instructions from the manual]].

#+begin_src elisp :tangle lang.example.el
;; https://github.com/haskell/haskell-mode
(use-package haskell-mode
  :straight (haskell-mode :type git
                          :host github
                          :repo "haskell/haskell-mode")
  :config
  (require 'haskell-interactive-mode)
  (require 'haskell-process)
  :hook
  (haskell-mode . haskell-unicode-input-method-enable)
  (haskell-mode . interactive-haskell-mode)
  :custom
  (haskell-process-suggest-remove-import-lines t)
  (haskell-process-auto-import-loaded-modules t)
  (haskell-process-log t)
  (haskell-stylish-on-save t))
#+end_src

Please note that [[https://wiki.haskell.org/GHC/GHCi][GHCi]], [[https://github.com/ndmitchell/hlint][HLint]] and [[https://github.com/haskell/stylish-haskell][stylish-haskell]] are needed for this configuration to work.

**** Haskell Environment Configuration in Nix

For convenience, I use direnv to manage my environments. Considering that I am a Nix user and the configuration described above needs GHCi, Hlint and stylish-haskell installed, I just have to see to it that a project directory tree contains an .envrc file that contains the =use nix= string to relegate env configuration to the nix configuration and then populate default.nix to contain description of the needed environment.

So, =.envrc= should contain the following:

#+begin_src conf
use nix
#+end_src

and my =default.nix= file will contain something to the tune of the snippet below.

#+begin_src nix
{ sources ? import ./nix/sources.nix }:

let
  nixpkgs = import sources.nixpkgs {};
in
nixpkgs.mkShell {
  buildInputs = with nixpkgs.haskellPackages; [
    ghci
    hlint
    stylish-haskell
  ];
}
#+end_src

To add another layer of convenience or complexity, depending on how you want to look at it 🤷🏿‍♂️, I manage my nix packages with [[https://github.com/nmattia/niv][niv]] in order to decouple the project packages from my system configuration (i.e.: every project installs packages in reference to a pinned package repository that remains the same even if the system repository changes over time which improves reproducability). This is where the =./nix/sources.nix= bit comes into the picture -- that's a niv thing. In order to populate the =nix/sources.nix= and =nix/sources.json= files that nix needs, I have to run =niv init= inside of the directory where the default.nix resides. After all of this is done, we have to allow direnv to evaluate the files within the directory to autoload our environment. I sometimes do this within emacs with ~(envrc-allow)~ but you can also do this from a terminal with the command =direnv allow=.

*** Elm

#+begin_src elisp :tangle lang.example.el
;; https://github.com/jcollard/elm-mode
(use-package elm-mode
  :straight (elm-mode :type git
                          :host github
                          :repo "jcollard/elm-mode"))
#+end_src

** Misc

*** 🌈 Rainbow Delimiters

#+begin_src elisp :tangle lang.example.el
;; https://github.com/Fanael/rainbow-delimiters
(use-package rainbow-delimiters
  :straight (rainbow-delimiters :type git
                                :host github
                                :repo "Fanael/rainbow-delimiters")
  ;; :hook
  ;; ;; https://github.com/patrickt/emacs
  ;; ((prog-mode) . rainbow-delimiters-mode)
  :config
  (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode))
#+end_src

*** Paredit

In order to simplify editing LISPs, [[https://github.com/emacsmirror/paredit][paredit]] can be used to assist in keeping forms balanced (i.e.: ensuring that a form always has as many opening as closing parenthesis).

#+begin_src elisp :tangle lang.example.el
;; https://github.com/emacsmirror/paredit
(use-package paredit
  :straight (paredit :type git
                     :host github
                     :repo "emacsmirror/paredit"))
#+end_src

*** TODO Inheritenv

#+begin_src elisp :tangle lang.example.el
;; https://github.com/purcell/inheritenv
(use-package inheritenv
  :straight (inheritenv :type git
                        :host github
                        :repo "purcell/inheritenv"))
#+end_src

*** Envrc

By using the [[https://github.com/purcell/envrc][envrc]] package, buffer-local variables can be managed through the configuration of the [[https://direnv.net/][direnv]] .envrc file.

#+begin_src elisp :tangle lang.example.el
;; https://github.com/purcell/envrc
(use-package envrc
  :straight (envrc :type git
                   :host github
                   :repo "purcell/envrc")
  :hook (after-init . envrc-global-mode)
  :bind-keymap ("C-c e" . envrc-command-map))
#+end_src

We bind =C-c e= to envrc to simplify access to mode toggles and reloading facilities.

**** Example Usage

As a Nix ❄️ user, there are a few [[https://github.com/direnv/direnv/wiki/Nix][options]] available for managing direnv environments of which [[https://github.com/nix-community/nix-direnv][nix-direnv]] happened to be an easier and faster option. As an example, observe the following *shell.nix* or *default.nix*

#+begin_src nix :tangle playground/nix-direnv/shell.nix
# save this as shell.nix
{ pkgs ? import <nixpkgs> {}}:

pkgs.mkShell {
  nativeBuildInputs = [ pkgs.hello ];
}
#+end_src

along with the following *.envrc*

#+begin_src bash :tangle playground/nix-direnv/.envrc
use nix
#+end_src

which defines an environment that is configured upon directory entry.

Dropping into an appropriate shell through Projectile shell ~(projectile-run-shell)~ (or similar) commands should result to a pre-configured environment.

#+begin_src org :tangle playground/nix-direnv/README.org
,* Test

,#+begin_src elisp
(shell-command-to-string "hello")
,#+end_src

,#+RESULTS:
: Hello, world!
#+end_src

***** TODO Verify that file is broken README.org

Check if disabling of the envrc-global-mode affects the ability of the [[file:./playground/nix-direnv/README.org]] block to complete.

** LSP

*** TODO Eglot

#+begin_src elisp :tangle lang.example.el
;; https://github.com/joaotavora/eglot
(use-package eglot
  :straight (eglot :type git
                   :host github
                   :repo "joaotavora/eglot"))
#+end_src

*** COMMENT Emacs LSP

**** LSP-mode

#+begin_src elisp :tangle lang.example.el
;; https://emacs-lsp.github.io/lsp-mode/page/installation/#vanilla-emacs
(use-package lsp-mode
  :straight (lsp-mode :type git
                      :host github
                      :repo "emacs-lsp/lsp-mode")
  :bind (:map lsp-mode-map ("TAB" . completion-at-point))
  :init
  (setq-default read-process-output-max (* 1024 1024))
  (setq  gc-cons-threshold (* 100 1024 1024))
  ;;(setq lsp-keymap-prefix "C-c C-M-l")
  ;;(setq lsp-log-io t) ;; ⚠️ turn off for performance
  :hook
  ;; (XXX-mode . lsp)
  (java-mode . lsp)
  (go-mode . lsp)
  :commands
  (lsp lsp-deferred)
  ;;:config
  ;;(define-key lsp-mode-map (kbd "C-c C-M-l") lsp-command-map)
  ;;(lsp-enable-which-key-integration t)
  )
#+end_src

**** LSP-ui

#+begin_src elisp :tangle lang.example.el
;; https://emacs-lsp.github.io/lsp-mode/page/installation/#use-package
;; https://config.daviwil.com/emacs
;; https://github.com/emacs-lsp/lsp-ui
(use-package lsp-ui
  ;;:straight t
  :hook (lsp-mode . lsp-ui-mode)
  :config
  (setq lsp-ui-sideline-enable t
        lsp-ui-sideline-show-hover nil
        lsp-ui-doc-position 'bottom)
  (lsp-ui-doc-show))
#+end_src

**** Ivy Integration

The Ivy completion framework can be used in combination with Emacs LSP through the native [[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy integration]].

#+begin_src elisp :tangle lang.example.el
;; https://github.com/emacs-lsp/lsp-ivy
(use-package lsp-ivy
  :hook (lsp-mode . lsp-ivy-mode))
#+end_src

**** Treemacs Integration

The Treemacs tree layout explorer can be used in combination with Emacs LSP through the [[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs integration]].

#+begin_src elisp :tangle lang.example.el
;; https://github.com/emacs-lsp/lsp-treemacs
(use-package lsp-treemacs
  :commands lsp-treemacs-errors-list
  :after lsp-mode)
#+end_src

**** Docker Integration

In order to use LSP with projects where the language servers runs inside Docker containers, one can use the [[https://github.com/emacs-lsp/lsp-docker][lsp-docker integration]].

#+begin_src elisp :tangle lang.example.el
;; https://github.com/emacs-lsp/lsp-docker
(setq lsp-docker-client-configs
      '((:server-id bash-ls :docker-server-id bashls-docker :server-command "bash-language-server start")
        (:server-id clangd :docker-server-id clangd-docker :server-command "clangd")
        (:server-id css-ls :docker-server-id cssls-docker :server-command "css-languageserver --stdio")
        (:server-id dockerfile-ls :docker-server-id dockerfilels-docker :server-command "docker-langserver --stdio")
        (:server-id gopls :docker-server-id gopls-docker :server-command "gopls")
        (:server-id html-ls :docker-server-id htmls-docker :server-command "html-languageserver --stdio")
        (:server-id pyls :docker-server-id pyls-docker :server-command "pyls")
        (:server-id ts-ls :docker-server-id tsls-docker :server-command "typescript-language-server --stdio")))
#+end_src

#+begin_src elisp :tangle lang.example.el
;; https://github.com/emacs-lsp/lsp-docker
(use-package lsp-docker
  :straight (lsp-docker :type git
                        :host github
                        :repo "emacs-lsp/lsp-docker")
  :after lsp-mode
  ;;:init
  ;;(setq lsp-docker-client-packages '()
  ;;      lsp-docker-client-configs '())
  :config
  (lsp-docker-init-clients :path-mappings '(("/home/vidbina/src" . "/projects"))
                           ;;:docker-image-id "vidbina/lsp-docker-langservers:latest"
                           :client-packages lsp-docker-default-client-packages
                           :client-configs lsp-docker-default-client-configs
                           ;;:client-configs '((:server-id 'clangd
                           ;;                              :docker-server-id 'examplels-docker
                           ;;                              :docker-image-id "vidbina/lsp-docker-langservers:latest"
                           ;;                              :docker-container-name "vidbina-lsp-clangd"
                           ;;                              :server-command "ccls"
                           ))
#+end_src

***** TODO Language-specific configuration

Refactor the =lsp-docker-client-configs= such that the LSP config for every language is defined within the language's chapter within this config.

* Developer Notes

** Tangle Helper

The =my-dotfiles-tangle-wrapper= helper allows us to spawn an Emacs session with our freshly tangled configuration in order to spot early errors.

#+CAPTION: Screenshot of the a blank Emacs session automatically started by the tangle helper.
[[file:images/screenshot-tangle-helper-full.png]]

#+begin_src elisp :results none
(defun my-dotfiles-tangle-wrapper (orig-fun &rest args)
  (message "Wrapping %S with %S" orig-fun args)
  (let ((res (apply orig-fun args))
        (command "emacs")
        (args (list "-q"
                    "--load=init.el"
                    "--debug-init"
                    "--name=Emacs Test"
                    (format "--file=%s" buffer-file-name))))
    (apply #'start-process `("emacs-for-org-cite-export" nil ,command ,@args))
    (message "Done and got %S" res)
    res))
#+end_src

*** Enable

Enable the tangle helper by running the following snippet with ~(org-ctrl-c-ctrl-c)~ mapped by default to =C-c C-c=.

#+begin_src elisp :results none
(advice-add 'org-babel-tangle :around #'my-dotfiles-tangle-wrapper)
#+end_src

*** Disable

Disable the tangle helper by running the following snippet with ~(org-ctrl-c-ctrl-c)~ mapped by default to =C-c C-c=.

#+begin_src elisp :results none
(advice-remove 'org-babel-tangle #'my-dotfiles-tangle-wrapper)
#+end_src

* Footnotes

[fn:6] Different variants of Markdown may have slightly differing and sometimes conflicting notation for some simple formatting markers such as the ones needed to underline, boldface or italicize text.

[fn:4] By allowing the Emacs package system to load packages prior to engaging our selected package manager, it becomes harder to establish where package-related state gets introduced. By choosing to manage all packages declaratively (through code) through a single package manager, one creates a situation that is easier to debug (single actor to observe) and reproduce (by reevaluating the configuration) while being a tad more deterministic (reduced ability of imperatively grown global state to break the configuration).

[fn:3] Remember that we're just using =~/.emacs.d= to simplify the text, but if you use another /[[emacsconfdir][emacs configuration directory]]/ you'll need to substitute every occurence of that path accordingly)

[fn:2] I am the /perpetual beginner/ 🌱 so I'm mostly writing this for my future self. 😅

[fn:1] Literal in the "Literal Programming" way as coined by Donald Knuth

[fn:5] Keywords can be recognized by the =:= (colon character) prefix.
