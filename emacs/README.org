* Emacs Configuration
  
Definitely not an Emacs distro but a somewhat wieldable Emacs config.

** Setup

Populate all necessary files in the =~/.emacs.d= directory to get started. Emacs will be looking for =init.el= which, in this repo, also sources =lang.el= and =personal.el=, so beware.

Here be dragons. üêâ

*** Personal Details

Populate a =personal.el= file which defines your name, your e-mail details and some other /very personal/ configuration bits such as theme customizations or personalized keybindings. Use the following snippet as an example of a configuration that may work.

#+begin_src elisp
(setq user-full-name "David Asabina"
      inhibit-startup-screen t
      smtpmail-debug-info t
      message-send-mail-function 'message-send-mail-with-sendmail)

;; TODO fill in the blanks for mu4e-contexts
(use-package mu4e
  :straight nil
  :config
  (setq mail-user-agent 'mu4e-user-agent
        mu4e-compose-format-flowed t
        mu4e-context-policy 'always-ask
        mu4e-get-mail-command "true"
        mu4e-index-update-in-backgroud t
        mu4e-view-show-addresses t
        mu4e-contexts `())

(add-hook 'mu4e-compose-mode-hook 'mml-secure-sign-pgpmime)

(setq message-citation-line-format "On %d.%m.%Y at %R UTZ%z, %f wrote:\n"
      message-citation-line-function #'message-insert-formatted-citation-line)

;; https://www.djcbsoftware.nl/code/mu/mu4e/Reading-messages.html
(add-to-list 'mu4e-view-actions
             '("ViewInBrowser" . mu4e-action-view-in-browser) t)

(defun vidbina-theme-dark ()
  "Load vidbina's dark theme of choice"
  (interactive)
  (modus-themes-load-vivendi)
  (setq org-format-latex-options `(:scale 1.5 :foreground "White" :background "Transparent")))

(defun vidbina-theme-light ()
  "Load vidbina's light theme of choice"
  (interactive)
  (modus-themes-load-operandi)
  (setq org-format-latex-options `(:scale 1.5 :foreground "Black" :background "Transparent")))

(defun vidbina-wrap ()
  "Load vidbina's wrapping setup"
  (interactive)
  (visual-line-mode)
  (adaptive-wrap-prefix-mode))

(defun vidbina-browse-url-xsel (url &optional ignored)
  (shell-command (format "echo \"%s\" | xsel -ib" url)))

(setq browse-url-browser-function 'vidbina-browse-url-xsel)

(setq whitespace-style '(trailing tabs newline tab-mark newline-mark))

(global-set-key (kbd "C-x D") 'deft)
(global-set-key (kbd "C-c v l") 'vidbina-theme-light)
(global-set-key (kbd "C-c v d") 'vidbina-theme-dark)
(global-set-key (kbd "C-c v TAB") 'vidbina-wrap)
(global-set-key (kbd "C-c v t") 'toggle-truncate-lines)
(global-set-key (kbd "C-c v c") 'completion-at-point)

(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)

(global-set-key (kbd "C-c p") 'projectile-command-map)


;; https://github.com/bbatsov/projectile/#installation
(projectile-mode +1)
(persp-mode +1)

(setq fill-column 1)

;; https://orgmode.org/manual/Handling-Links.html
(setq org-return-follows-link t)

(setq org-log-into-drawer "LOGBOOK")

;; Allow for resizing of images
(setq org-image-actual-width nil)

(setq org-html-head-extra
      "<link rel=\"alternate stylesheet\" type=\"text/css\" href=\"~/org/style.css\" />")
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Position-Info.html
(setq column-number-mode t)

;; https://joy.pm/post/2017-09-17-a_graphviz_primer/
(defun my/fix-inline-images ()
  (when org-inline-image-overlays
    (org-redisplay-inline-images)))

(add-hook 'org-babel-after-execute-hook 'my/fix-inline-images)

;; https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-gnuplot.html
(org-babel-do-load-languages 'org-babel-load-languages '((gnuplot . t)
                                                         (shell . t)))
;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Variables.html
;; http://emacs-fu.blogspot.com/2011/08/customizing-mode-line.html
(setq-default mode-line-format
              (list
               "%e"
               ;; ** when modified
               ;; -- if not modified
               ;; %% when read-only
               ;; %+ read-only but modified
               mode-line-modified
               mode-line-frame-identification
               mode-line-buffer-identification
               ;;(propertize mode-name :foreground (modus-themes-color 'magenta-alt))
               ;; https://evil.readthedocs.io/en/latest/overview.html?highlight=mode-line#modes-and-states
               ;; <N> normal state
               ;; <I> insert state
               ;; <V> visual state
               ;; <R> replace state
               ;; <O> operator-pending state
               ;; <M> motion state
               ;; <E> emacs state
               ;;evil-mode-line-tag
               ;; see more on modus-themes colors
               ;; https://github.com/protesilaos/modus-themes/blob/main/modus-themes.el#L436
               ;;'(:propertize mode-name 'face (list :background (modus-themes-color 'green-intense-bg)
               ;;                                        :foreground (modus-themes-color 'fg-main)))
               " "
               '(:eval (persp-current-name))
               ;;'(:propertize '(:eval (persp-current-name)) 'face (list :background (modus-themes-color 'yellow-intense-bg)))
               ;;(propertize (apply #'concat (persp-mode-line))
               ;;            ;;'face (list :background (modus-themes-color 'red-intense-bg))
               ;;            )
               ;;" "
               ;;mode-line-end-spaces
               ;;;;'(:eval (propertize mode-line-misc-info 'face `(:background ,(modus-themes-color 'yellow-nuanced-bg) :foreground ,(modus-themes-color 'yellow-nuanced-fg))))
               ;;;;'(:eval (propertize "x " 'face '(:background "black" :foreground "#FF8800")))
               ;;;; TODO right align
               ;;;; https://blog.tygr.info/emacs/mode-line
               ;;;; https://emacs.stackexchange.com/questions/5529/how-to-right-align-some-items-in-the-modeline
               ;;;;(propertize "%P" 'face 'font-lock-string-face)
               " "
               (propertize "(%l,%c)%p"
                           ;;'face (list :background (modus-themes-color 'blue-intense-bg))
                           )
               ;;" "
               ;;(propertize "%I"
               ;;            ;;'face (list :background (modus-themes-color 'yellow-intense-bg))
               ;;            )
               ;;" "
               mode-line-modes
               ""))
#+end_src

*** Languages or Language-based Tooling

Populate a =lang.el= file which defines all of the major-modes and language-related tooling that are relevant to you. In my case I have simply defined a symlink from [[file:lang.example.el][lang.example.el]] to lang.el. YMMV!
