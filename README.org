:PROPERTIES:
:CUSTOM_ID: vidbinas-dotfiles
:END:
#+TITLE: [[https://github.com/vidbina][vidbina]]'s dotfiles

These dotfiles make my life slightly more convenient. Not promising they'll do the same for yours though. üòâ

* TODO [2/19] Convert home-manager config to literate config

Refer to [[file:emacs/README.org]] for an example of a literate config that tangles into multiple output files.

- [ ] direnv
- [ ] .xsession
- [ ] .Xresources.d
- [ ] .Xmodmap
- [ ] tmux
- [ ] Neovim
- [ ] Termite
- [ ] Starship
- [ ] Rofi
- [ ] Redshift
- [ ] Ghorg
- [ ] Asciinema
- [ ] Compton
- [ ] Octave
- [ ] Lein
- [ ] Colorit
- [ ] Conky
- [X] Emacs
- [X] Git

* TODO Add MIME types

#+begin_quote conf
application/pdf=org.pwmt.zathura-pdf-mupdf.desktop;okularApplication_pdf.desktop;
application/octet-stream=emacsclient.desktop;
#+end_quote

* Usage

My configuration is currently managed with [[https://github.com/nix-community/home-manager][home-manager]] for the better DX or UX. Before using home-manager, I manually managed symlinks from my config directory to this dotfiles repo. The use of [[https://www.gnu.org/software//stow/][GNU Stow]] was considered for a brief moment until I realized that Stow was written in Perl and I came to terms with my unwillingness to have a critical part of my stack based on tooling that brings me no joy üôä (on account of my troubled personal history with Perl).

** The easy way: with home-manager
:PROPERTIES:
:CUSTOM_ID: home-manager
:END:

The use of home-manager is pretty straightforward especially with the convenient *nix shell* and the *Makefile* that make usage even easier. The general idea is as follows:
- [[file:shell.nix]] defines a shell environment that contains all packages needed to install or apply a configuration. The packages include *niv* which helps us manage versions of our packages, *home-manager* which actually manages our home environments (hence the name) and and some utils.
- [[file:Makefile]] contains some rules to simplify how we call home-manager inside of the nix-shell since it effectively reduces the UX down to =make= or =make test= calls as opposed to =home-manager -f ./home.nix -v -n build= and =home-manager -f ./home.nix switch= respectively (which you don't want to have to remember ü§∑üèø‚Äç‚ôÇÔ∏è).

Typical use will be as follows:
1. Enter the nix-shell using =nix-shell --pure=
2. Optionally, update niv-managed packages by running =niv update= to update the sources files ([[file:nix/sources.json]] and [[file:nix/sources.nix]])
3. Run =make test= to test the home-manager configuration or =make= to install the configuration
4. Optionally, if package update step was completed (step 2 above), commit the changes made to the niv sources files
5. Profit üí∞

*** Shell

For home-manager to work, we define a nix-shell that we creates a controlled environment for our Makefile to work.

#+begin_src nix :noweb yes :tangle shell.nix
# Tangled from README.org
# From https://github.com/ryantm/home-manager-template

let

  sources = import ./nix/sources.nix;

  nixpkgs-src = sources."nixpkgs";
  hm-src = sources."home-manager";
  nur-src = sources."NUR";

  pkgs = import nixpkgs-src { };

in
pkgs.mkShell rec {

  name = "home-manager-shell";

  buildInputs = with pkgs; [
    <<shell-build-inputs>>
  ];

  <<shell-hook>>
}
#+end_src

The build inputs for our shell are:

#+begin_src nix :noweb-ref shell-build-inputs
niv
(import hm-src { inherit pkgs; }).home-manager

cacert # to resolve CA cert issue
hello
git
nix
ncurses # to resolve tput issue
which
#+end_src

For the shell environment to be portable enough to run on both Linux and Darwin (macOS) systems, we define a /shell hook/ that will export a few environment variables into existence depending on the system.

#+begin_src bash :noweb-ref shell-hook-src
export NIX_PATH="nixpkgs=${nixpkgs-src}:home-manager=${hm-src}:NUR=${nur-src}"
export HOME_MANAGER_CONFIG=${system}
#+end_src

The above snippet is a bit of a cheat because we've formatted it as bash but some of the variable expansion work is being done by Nix and not Bash. üòÖ We wrap the shell expressions into the following Nix statement to set =system= (see the cheat in the snippet above) and we basically pull in the sources through our niv sources file which is defined at the start of our [[file:shell.nix]] file.

#+begin_src nix :noweb yes :noweb-ref shell-hook
shellHook = with pkgs; let
  system = (
    if stdenv.isLinux
    then "./home-linux.nix"
    else
      (if stdenv.isDarwin
      then "./home-darwin.nix"
      else "./home.nix")
  );
in
''
  <<shell-hook-src>>
'';
#+end_src

With all of this out of the way, running =make= should just drop us into a Nix shell with everything preconfigured and then run some incantation of =home-manager switch= in order to switch our home-manager-managed, pun intended, environment.

*** TODO Common Configuration

#+begin_src nix :noweb yes :tangle common.nix
# Tangled from README.org
{ config, lib, pkgs, ... }:

# TODO: Config mutt
let
  inherit (pkgs) stdenv;
  pathIfExists = (p: if (builtins.pathExists p) then [ p ] else [ ]);
in
{
  imports = [
    ./mail.nix
    ./vim.nix
    ./dev.nix
  ]
  ++ (pathIfExists ./personal.nix);

  home.file.".config/ranger".source = config.lib.file.mkOutOfStoreSymlink ./ranger;

  # TODO: Remove, likely not necessary
  home.file.".direnvrc".source = config.lib.file.mkOutOfStoreSymlink ./direnv/direnvrc;

  #home.file.".profile".text = ''
  #  PATH=${toString ./bin}:$HOME/.nix-profile/bin:$PATH
  #  export PATH
  #'';

  home.sessionPath = [
    (toString ./bin)
  ];

  manual = {
    # Use `home-manager-help`
    html.enable = true;

    # Use `man home-configuration.nix`
    manpages.enable = true;
  };

  nixpkgs.overlays = [
    (self: super: { })
  ];

  programs.bat = {
    enable = true;
    config = {
      theme = "base16";
    };
  };

  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;

  programs.direnv = {
    enable = true;
    nix-direnv = {
      enable = true;
    };
  };

  programs.tmux = {
    enable = true;
    extraConfig = builtins.readFile (./. + "/tmux.conf");
  };

  programs.zsh = {
    enable = true;
    enableAutosuggestions = true;
    enableSyntaxHighlighting = true;
    #dotDir = ".config/zsh";

    initExtraBeforeCompInit = ''
      export EDITOR="emacsclient -c -a emacs"
      export VISUAL="emacsclient -c -a emacs"

      setopt histignorespace # keeps lines preceded with SPACE out of history

      zmodload -i zsh/complist
      source ${./zsh/zstyle.zsh}

      autoload -U promptinit && \
      promptinit && \
      prompt adam2 8bit yellow red blue

      # enable bash completion
      autoload -U +X bashcompinit && \
      bashcompinit
    '';
    initExtra = ''
      bindkey -v # use vim key bindings
      source ${./zsh/keybindings.zsh}

      source ${./zsh/functions.zsh}

      source ${pkgs.fzf}/share/fzf/completion.zsh
      source ${pkgs.fzf}/share/fzf/key-bindings.zsh
    '';
  };
}
#+end_src

*** Linux
:PROPERTIES:
:header-args: :noweb-sep "\n\n"
:END:

#+begin_src nix :noweb yes :tangle home-linux.nix
# Tangled from README.org
{ lib, pkgs, ... }:

{
  imports = [
    ./common.nix
    ./doc.nix
    ./browser.nix
    ./x.nix

    ./emacs

    ./rofi
  ];

  home.packages = with pkgs; [
    vokoscreen

    (mu.overrideAttrs (oldAttrs:
      let
        rev = "bbf55256e58aa62546e8bdade1d127d7e6a9b57e";
      in
      {
        version = "1.6.10-${rev}";
        src = fetchFromGitHub {
          owner = "djcb";
          repo = "mu";
          rev = "${rev}";
          sha256 = "sha256-ozIITQbt7U4qDzHjbfDyIogIkMRpX1VsBr9igdpNqcI=";
        };
        emacs = my-emacs;
      }))
  ];

  <<home-linux-services>>
}
#+end_src

***** X

#+begin_src nix :noweb yes :tangle x.nix
# Tangled from README.org
{ config, pkgs, lib, options, ... }:

{
  home.packages = with pkgs; [
    brightnessctl
    neofetch
    peek
    screenkey
    xdotool
    xsel-copy-url

    (writeScriptBin "colors" ''
      # https://askubuntu.com/questions/27314/script-to-display-all-terminal-colors

      for x in {0..8}; do
        for i in {30..37}; do
          for a in {40..47}; do
            echo -ne "\e[$x;$i;$a""m\\\e[$x;$i;$a""m\e[0;37;40m "
          done
          echo
        done
      done
      echo ""
    '')
  ];

  xdg.mimeApps.defaultApplications = {
    "text/html" = [ "xsel-copy-url.desktop" ];
    "x-scheme-handler/about" = [ "xsel-copy-url.desktop" ];
    "x-scheme-handler/ftp" = [ "xsel-copy-url.desktop" ];
    "x-scheme-handler/http" = [ "xsel-copy-url.desktop" ];
    "x-scheme-handler/https" = [ "xsel-copy-url.desktop" ];
    "x-scheme-handler/unknown" = [ "xsel-copy-url.desktop" ];
  };

  nixpkgs.overlays = [
    (self: super: {
      <<x-overlays>>
    })
  ];

  xdg.mimeApps = {
    enable = true;
  };

  xsession = {
    enable = true;
    pointerCursor = {
      name = "Vanilla-DMZ";
      package = pkgs.vanilla-dmz;
      size = 64;
    };
    initExtra = ''
      setxkbmap -option -model dell -layout us -variant intl -option lv3:caps_switch
    '';
    profileExtra = ''
      hsetroot -solid '#ff9800'
    '';
  };

  <<x-programs>>
  # programs.xmobar = {
  #   enable = true;
  #   # extraConfig = 
  # };

  # TODO: https://gvolpe.com/blog/xmonad-polybar-nixos/
  # try polybar sometime

  # services.taffybar = {
  #   enable = true;
  # };
}
#+end_src

****** xsel-copy-url

#+begin_src nix :noweb-ref x-overlays
xsel-copy-url = pkgs.buildEnv (
  let
    script = pkgs.writeScriptBin "xsel-copy-url" ''
      url=$1
      echo "$url" | ${pkgs.xsel}/bin/xsel -ib
      ${pkgs.libnotify}/bin/notify-send \
        --category=url \
        --urgency=low \
        "üåç Link Copied" "Paste to enter $url"
    '';
  in
  {
    name = "xsel-copy-url";
    paths = [
      script

      (pkgs.makeDesktopItem {
        name = "xsel-copy-url";
        exec = "${script}/bin/xsel-copy-url %U";
        comment = "Open link by copying it into the clipboard with xsel";
        desktopName = "xsel-copy-url";
        type = "Application";
        categories = builtins.concatStringsSep ";" [
          "Network"
          "WebBrowser"
        ] + ";";
        mimeType = builtins.concatStringsSep ";" [
          "text/html"
          "x-scheme-handler/http"
          "x-scheme-handler/https"
          "x-scheme-handler/ftp"
        ] + ";";
      })
    ];
  }
);
#+end_src

****** urxvt

#+begin_src nix :noweb-ref x-programs
programs.urxvt = {
  enable = true;
  package = pkgs.rxvt-unicode;
  iso14755 = false;
  extraConfig = {
    "geometry" = "128x32";
    "perl-lib" = "${pkgs.rxvt-unicode}/lib/urxvt/perl";
    "perl-ext-common" = builtins.concatStringsSep "," [
      "default"
      "font-size"
      "url-select"
      "color-themes"
    ];
    "url-select.autocopy" = true;
    "url-select.launcher" = "${pkgs.xsel-copy-url}/bin/xsel-copy-url";
    "url-select.underline" = true;

    "color-themes.themedir" = "${pkgs.vidbina-urxvt-themes}/share";
    "color-themes.state-file" = "${config.home.homeDirectory}/.urxvt-theme";
    "color-themes.autosave" = 1;
  };
  fonts = [
    "xft:DejaVu Sans Mono:pixelsize=28:antialias=true"
    "xft:Fira Code:size=28:antialias=true"
    "xft:Iosevka:size=28:antialias=true"
  ];
  keybindings = {
    "C-minus" = "perl:font-size:decrease";
    "C-plus" = "perl:font-size:increase";
    "C-=" = "perl:font-size:reset";
    "M-u" = "perl:url-select:select_next";
    "M-C-n" = "perl:color-themes:next";
    "M-C-p" = "perl:color-themes:prev";
    "M-C-l" = "perl:color-themes:load-state";
    "M-C-s" = "perl:color-themes:save-state";
  };
  scroll.bar.enable = false;
};
#+end_src

******* themes

#+begin_src nix :noweb-ref x-overlays
vidbina-urxvt-themes =
  let
    readTheme = x:
      let
        text = builtins.readFile (./. + "/Xresources.d/themes/${x}");
      in
      pkgs.writeTextDir "share/${x}" text;
  in
  pkgs.symlinkJoin {
    name = "vidbina-urxvt-themes";
    paths = map readTheme [
      "vidbina-dark.Xresources"
      "vidbina-light.Xresources"
    ];
  };
#+end_src

****** autorandr

#+begin_src nix :noweb-ref x-programs
programs.autorandr = {
  enable = true;
};
#+end_src

***** Applets

#+begin_src nix :noweb-ref home-linux-services
services.blueman-applet.enable = true;
services.network-manager-applet.enable = true;
#+end_src

***** Gammastep

#+begin_src nix :noweb-ref home-linux-services
services.gammastep = {
  enable = true;
  dawnTime = "5:00-6:00";
  duskTime = "17:35-19:00";
  latitude = 52.5;
  longitude = 13.4;
  temperature = {
    # https://www.eizo.com/library/basics/color_temperature_on_an_LCD_monitor/
    day = 6500;
    night = 2500;
  };
  tray = true;
};
#+end_src

***** GPG Agent

#+begin_src nix :noweb-ref home-linux-services
services.gpg-agent = {
  enable = true;
  enableSshSupport = true;
};
#+end_src

***** Syncthing

#+begin_src nix :noweb-ref home-linux-services
services.syncthing = {
  enable = true;
  tray = { enable = true; };
};
#+end_src

***** Trayer

#+begin_src nix :noweb-ref home-linux-services
services.trayer = {
  enable = true;
  settings = {
    align = "right";
    alpha = 0;
    edge = "top";
    #height = 24;
    monitor = "primary";
    tint = "0x00000000";
    transparent = true;
    width = 150;
    widthtype = "pixel";
  };
};
#+end_src

*** Darwin

#+begin_src nix :tangle home-darwin.nix
# Tangled from README.org
{ lib, pkgs, ... }:

{
  imports = [
    ./common.nix
    ./emacs/default-darwin.nix
  ];
}
#+end_src

** The more tedious and manual way: without home-manager

The tedious way basically requires one to make symlinks from the needed locations into this dotfiles repository. There are a number of ways how one can simplify this experience ranging from manually symlinking everything that you would need all the way up to using a [[id:home-manager][home-manager]] alternative like GNU Stow to manage these symlinks for you (and minimize the toil on your end).

This is a listing of the symlinks that I could track in my home directory right before moving over to home-manager. I may have missed some, but largely this covers much of what I have packaged in this repository so it should be relatively complete.

#+begin_example
  ~/.Xmodmap -> ~/dotfiles/xmodmap
  ~/.coloritrc -> ~/dotfiles/colorit/coloritrc
  ~/.conkyrc -> ~/dotfiles/conky.conf
  ~/.emacs.d -> ~/dotfiles/emacs
  ~/.lein -> ~/dotfiles/lein
  ~/.octaverc -> ~/dotfiles/octave/.octaverc
  ~/.tmux.conf -> ~/dotfiles/tmux.conf
  ~/.xsession -> ~/dotfiles/xsession
  ~/.config/asciinema -> ~/dotfiles/asciinema
  ~/.config/ghorg -> ~/dotfiles/ghorg
  ~/.config/redshift.conf -> ~/dotfiles/redshift.conf
  ~/.config/rofi -> ~/dotfiles/rofi
  ~/.config/starship.toml -> ~/dotfiles/starship.toml
  ~/.config/termite -> ~/dotfiles/termite
  ~/.direnvrc -> ~/dotfiles/direnv/direnvrc
#+end_example

*** TODO direnv
*** .xsession
:PROPERTIES:
:CUSTOM_ID: xsession
:END:

#+begin_src shell
ln -s ${PATH_TO_DOTFILES}/xsession ${HOME}/.xsession
#+end_src

- sets the background (I just set a background color, but use =feh= to
  set a wallpaper)
- loads .Xmodmap to load custom keyboard bindings
- start WM

*** .Xresources.d
:PROPERTIES:
:CUSTOM_ID: xresources.d
:END:

#+begin_quote
‚ö†Ô∏è managed with nix home-manager?
#+end_quote

#+begin_src shell
ln -s ${PATH_TO_DOTFILES}/Xresources.d ${HOME}/.Xresources.d
#+end_src

*** .Xmodmap
:PROPERTIES:
:CUSTOM_ID: xmodmap
:END:

#+begin_src shell
ln -s ${PATH_TO_DOTFILES}/Xmodmap ${HOME}/.Xmodmap
#+end_src

- disables caps lock
- remaps tilde and grave to capslock+[shift]+z in an effort to minimise
  finger travel (the macbook has a narrower left shift and places the
  tilde/grave button between the left shift and the Z key)

*** Tmux
:PROPERTIES:
:CUSTOM_ID: tmux
:END:

#+begin_src shell
ln -s ${PATH_TO_DOTFILE}/tmux.conf ${HOME}/.config/tmux.conf
#+end_src

- sets up vi key bindings in tmux
- remaps colors

*** TODO Neovim
:PROPERTIES:
:CUSTOM_ID: neovim
:END:

#+begin_quote
‚ö†Ô∏è I haven't relied on init.nvim for a while since I broke my configuration a little while ago in my attempts to pull vim-plug with Nix and then manage all my other plugins through the init.nvim file. As a lazyperson's way out, I have simply given up and started managing my entire nvim configuration in nix.
#+end_quote

#+begin_src shell
ln -s ${PATH_TO_DOTFILE}/nvim ${HOME}/.config/nvim
#+end_src

- set tabbing behavior (expand tabs to 2 spaces)
- enable mouse in all modes
- define Plug extensions

*** Termite
:PROPERTIES:
:CUSTOM_ID: termite
:END:

#+begin_src shell
ln -s ${PATH_TO_DOTFILE}/termite ${HOME}/.config/termite
#+end_src

*** Starship
:PROPERTIES:
:CUSTOM_ID: starship
:END:

#+begin_src shell
ln -s ${PATH_TO_DOTFILE}/starship.toml ${HOME}/.config/starship.toml
#+end_src

*** Rofi
:PROPERTIES:
:CUSTOM_ID: rofi
:END:

#+begin_src shell
ln -s ${PATH_TO_DOTFILE}/rofi ${HOME}/.config/rofi
#+end_src

*** Redshift
:PROPERTIES:
:CUSTOM_ID: redshift
:END:

#+begin_src shell
ln -s ${PATH_TO_DOTFILE}/redshift ${HOME}/.config/redshift
#+end_src

*** Ghorg
:PROPERTIES:
:CUSTOM_ID: ghorg
:END:

#+begin_src shell
ln -s ${PATH_TO_DOTFILE}/ghorg ${HOME}/.config/ghorg
#+end_src

*** Asciinema
:PROPERTIES:
:CUSTOM_ID: asciinema
:END:

#+begin_src shell
ln -s ${PATH_TO_DOTFILE}/asciinema ${HOME}/.config/asciinema
#+end_src

*** TODO Compton
:PROPERTIES:
:CUSTOM_ID: todo-compton
:END:

#+begin_src shell
ln -s ${PATH_TO_DOTFILE}/compton/compton.conf ${HOME}/.config/compton.conf
#+end_src

*** Octave
:PROPERTIES:
:CUSTOM_ID: octave
:END:

#+begin_src shell
ln -s ${PATH_TO_DOTFILE}/octave/.octaverc ${HOME}/.config/.octaverc
#+end_src

**** TODO: Rename hidden file to more visible file
:PROPERTIES:
:CUSTOM_ID: todo-rename-hidden-file-to-more-visible-file
:END:
*** Lein
:PROPERTIES:
:CUSTOM_ID: lein
:END:

Package manager and build tool for Clojure. The .lein dotfile lists
convenience plugins for development.

#+begin_src shell
ln -s ${PATH_TO_DOTFILE}/lein ${HOME}/.lein
#+end_src

*** Colorit
:PROPERTIES:
:CUSTOM_ID: colorit
:END:

https://linux.die.net/man/1/colorit

Colorit is a script for markup-ing text input which is used in my setup
by dict.

#+begin_src shell
ln -s ${PATH_TO_DOTFILE}/colorit/coloritrc ${HOME}/.coloritrc
#+end_src

*** Conky
:PROPERTIES:
:CUSTOM_ID: conky
:END:

https://github.com/brndnmtthws/conky

Conky is a system monitoring tool which allows the presentation of
system metrics in a GUI.

#+begin_src shell
ln -s ${PATH_TO_DOTFILE}/conky.conf ${HOME}/.conkyrc
#+end_src

*** Emacs
:PROPERTIES:
:CUSTOM_ID: emacs
:END:

#+begin_src shell
ln -s ${PATH_TO_DOTFILE}/emacs ${HOME}/.emacs.d
#+end_src

* Personal Details

For developer tooling, we define our =userName= and =userEmail= which we will rely on in configuring git, for example.

#+begin_src nix :noweb yes :noweb-ref nix-devtools-git
userName = "David Asabina";
userEmail = "vid@bina.me";
#+end_src

We all have parts of our configs that are for our eyes only and the
[[file:personal.nix]] file can be populated to contain sensitive and private
parts of your configuration. This home-configuration will load a
personal.nix file if found so the use of this file is optional (your
configuration should work without it).

Observe the snippet below for an example of a valid personal.nix file.

#+begin_src nix
{ config, pkgs, lib, options, ... }:

{
  # Home Manager needs a bit of information about you and the
  # paths it should manage.
  home.username = "vidbina";
  home.homeDirectory = "/home/vidbina";

  # This value determines the Home Manager release that your
  # configuration is compatible with. This helps avoid breakage
  # when a new Home Manager release introduces backwards
  # incompatible changes.

  # You can update Home Manager without changing this value. See
  # the Home Manager release notes for a list of state version
  # changes in each release.
  home.stateVersion = "21.05";

  home.packages = [ ];
}
#+end_src

* Developer Tooling

We will be tangling this literate configuration into the needed dev.nix file.

For starters, we stub the general structure of the nix file and define the =<<nix-devtools>>= reference for us to direct our tool-specific configs into.

#+begin_src nix :noweb yes :tangle dev.nix
# Tangled from README.org
# Please modify by editing README.org and re-tangling to generate this nix file.
{ config, lib, pkgs, options, ... }:

{
  <<nix-devtools>>

  home.packages = [
    <<dev-packages>>
  ];
}
#+end_src

As an example, you can observe how we direct some comments into the previously defined reference. In the following sections, we will use this mechanism to tangle (basically "write") into parts of the dev.nix file.

#+begin_src nix :noweb-ref nix-devtools
# Tangling individual dev tools through nix-devtools noweb reference
#+end_src

** Git

We tangle the git-related configuration into [[file:dev.nix]] but if you want to manually set things up, check out the [[manual-git][manual git instructions]].

:MANUAL:
<<manual-git>>
Configure your gitconfig by symlinking the [[file:gitconfig]] file in this repository into the home directory.

#+begin_src shell
ln -s ./git/gitconfig ~/gitconfig
#+end_src

The global excludes file defaults to =./config/git/ignore= so we're linking our ignore go-to into this path for convenience.

#+begin_src shell
ln -s ./git/ignore ~/.config/git/ignore
#+end_src
:END:

#+begin_src nix :noweb yes :noweb-ref nix-devtools
programs.git = {
  enable = true;
  <<nix-devtools-git>>
};
#+end_src

*** Global Gitignore

For convenience we define [[file:git/ignore]] which we want to automatically want to honor in every repo. Based on the instructions in =man gitignore= we stub the =XDG_HOME_CONFIG/.config/git/ignore= and the =~/.gitignore= files to reflect the content of [[file:git/ignore]].

#+begin_src nix :noweb-ref nix-devtools
# Set global gitignore
home.file = {
  ".config/git/ignore".source = config.lib.file.mkOutOfStoreSymlink ./git/ignore;
};
#+end_src

#+begin_comment
Note that the =programs.git.ignores= setting in home manager can not coexist with the =home.file.".config/git/ignore"= home-manager option. I'm opting for the =home-file= approach since this simplifies updates to merely copying the output of the [[https://www.toptal.com/developers/gitignore][Toptal gitignore generator]]. üòâ
#+end_comment

*** Git LFS

We want LFS enabled.

#+begin_src nix :noweb-ref nix-devtools-git
lfs.enable = true;
#+end_src

*** Git Extra Configuration

Let's opt for naming our default branch "main", using nvim as our editor, using gpg2 are our GPG tool and setting git up to [[https://git-scm.com/docs/git-send-email][send patches by mail]].

#+begin_src nix :noweb-ref nix-devtools-git
extraConfig = {
  init = {
    defaultBranch = "main";
  };

  core = {
    editor = "nvim";
  };

  gpg = {
    program = "gpg2";
  };

  sendemail = {
    annotate = true;
    smtpServer = "msmtp";
    smtpServerOption = "-a vidbina";
  };
};
#+end_src

*** TODO COMMENT Diff: Look into delta or difftastic

#+begin_src nix :noweb-ref nix-devtools-git
delta = {
  enable = true;
};
#+end_src

#+begin_src nix :noweb-ref nix-devtools-git
difftastic = {
  enable = true;
};
#+end_src

** Language Utilities

*** Typescript Language Server

#+begin_src nix :noweb-ref dev-packages
pkgs.nodePackages.typescript-language-server
#+end_src

* E-mail

I have multiple ways of handling e-mails. For starters, I process nearly all of my e-mails that require deep thought and the ability to verify extraneous sources from the comfort of a workstation (i.e.: my laptop and trusted 2nd brain). Mobile is only used for the quick things on the go and I don't need much fancy capabilities there since I want to see these messages again once I'm behind the workstation just to verify that I didn't miss anything during the daze of being on the go (which tends to be the case when I'm on mobile).

I have used neomutt in combination with Neovim and mu4e in Emacs for nearly half a year, I've recently started experimenting with notmuch inside of Emacs which is another tool that is built on top of mu indexer capabilities.

#+begin_src nix :noweb yes :tangle mail.nix
# Tangled from README.org
{ config, pkgs, ... }:

{
  home.packages = with pkgs; [
    <<mail-packages>>
  ];
}
#+end_src

The following packages were part of my config before and are just seperated to help me break this down into subordinate chapters.

#+begin_src nix :noweb-ref mail-packages
isync
mb2md
msmtp
neomutt
notmuch
notmuch-mutt
offlineimap
urlview
#+end_src

** msmtp

** Notmuch

Much of my work-related comms transpires over e-mail. In order to obtain [[https://tongfamily.com/2022/01/22/superhuman-hidden-commands-to-top-and-bottom-are-gg-and-g/][superhuman-level-like-or-better]] üôä convenience, I am using [[https://notmuchmail.org/][notmuch]] which has [[https://notmuchmail.org/frontends/][plenty of frontends]] available.

** DONE Workers

See my private dotfiles where I have defined a mbsync service to handle synchronization of mail. Indexing could be handled through as a =PostExec= hook in the mail retrieval service but this will cause problems with mu4e spinning up mu/server to reindex the maildir and obtaining the read/write lock on the Xapian store.

* Neovim

For Neovim, remember that CoC completions basically work through use of the =C-n= and =C-p= binding to cycle through next and previous items in the completion listing.

https://developpaper.com/complete-guide-to-getting-started-with-coc-nvim/

#+begin_src nix :tangle vim.nix
# Tangled from  README.org
{ config, pkgs, ... }:

{
  programs.neovim = {
    enable = true;
    # Warning: Just bailed on init.vim and opted for nix so, WIP!

    #extraConfig = builtins.readFile (./. + "/nvim/init.vim");
    plugins = with pkgs.vimPlugins; let
      #sentinel-vim = pkgs.vimUtils.buildVimPlugin {
      #  name = "sentinel-vim";
      #  src = pkgs.fetchFromGitHub {
      #    owner = "hashicorp";
      #    repo = "sentinel.vim";
      #    rev = "main";
      #    sha256 = pkgs.lib.fakeSha256;
      #  };
      #};
    in
    [
      #{
      #  plugin = vim-plug;
      #  optional = false;
      #}

      #'https://github.com/hrother/offlineimaprc.vim.git'
      #'isRuslan/vim-es6'
      #'jeffkreeftmeijer/vim-dim', { 'branch': 'main' }
      #'sigmike/vim-taskjuggler'
      #'vim-scripts/openvpn'
      #ale
      #vim-scala
      coc-nvim
      deoplete-notmuch
      elm-vim
      goyo-vim
      neoformat
      nerdtree
      nvim-treesitter
      #orgmode
      plantuml-syntax
      #sentinel-vim
      tabular
      tagbar
      typescript-vim
      vim-airline
      vim-fugitive
      vim-gitgutter
      vim-graphql
      vim-markdown
      vim-nix
      vim-prettier
      vim-solidity
      vim-terraform
      wmgraphviz-vim
    ];
    vimdiffAlias = true;
    withRuby = true;
  };
}
#+end_src

* TODO Bring in XMonad configuration

For now, I symlink ~/.xmonad to ~/src/vidbina/xmonad-config and run =xmonad --recompile= to produce the Xmonad binary.

* TODO Bring in xmobar configuration

For now, I symlinked ~/.config/xmobar to ~/src/vidbina/xmobar-configuration.

* autorandr: Screen configuration

In order to simplify screen management, we can use the [[https://github.com/phillipberndt/autorandr/][autorandr]] utility.

For the first time using a configuration, we use the =arandr= utility to graphically align the screens in the formation that we want after which we can save and name the configuration using the following command (where =CONFIGNAME= is the name that we want to save the configuration as):

#+begin_src bash
autorandr --save CONFIGNAME
#+end_src

A configuration can be autoloaded by running the following command:

#+begin_src bash
autorandr --change
#+end_src

#+begin_quote
‚ö†Ô∏è With the autorandr tool, we have to plug screens into the same ports as we used when configuring the setup. In the case of my newer laptop where I have a bunch of USB C ports with the risk of pluggin monitors in different configurations between docking attempts, I just connect the monitor in every likely configuration, configure my setup with =arandr= and then save it with =autorandr --save= to ensure that autorandr will have seen that configuration before. üòâ
#+end_quote

* Syncthing

Navigate to [[http://localhost:8384/][Syncthing portal]] to configure your setup. As per [2022-05-05 Thu 12:08], the syncthing service in home-manager is only declarative to the extend of turning it on and providing extra CLI options to start the service with.

Consult the [[https://docs.syncthing.net/intro/getting-started.html][Getting Started]] guide to learn how to set it up "imperatively" (i.e.: setting up peers and generating their IDs and copying the needed information over to the other syncthing peers to establish connections) through the portal.

** TODO Set ignore file for Syncthing or move some sensitive stuff out of synced folders

Especially for things link mail indices and Org-roam databases, I may need to do this.

- https://docs.syncthing.net/users/ignoring.html
- https://github.com/org-roam/org-roam/issues/977
- https://github.com/org-roam/org-roam/issues/550

* Browsers

#+begin_src nix :noweb yes :tangle browser.nix
# Tangled from README.org
{ config, pkgs, lib, options, ... }:

let
  # TODO: Find a cleaner implementation, like an pkgs overlay at shell.nix?!?
  nur = import <NUR> { inherit pkgs; };
in
{
  home.packages = with pkgs; [
  ];

  <<browser-chromium>>

  <<browser-firefox>>
}
#+end_src

** Chromium

#+begin_src nix :noweb-ref browser-chromium
programs.chromium = {
  enable = true;

  extensions = [
    {
      # Metamask
      # https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn
      id = "nkbihfbeogaeaoehlefnkodbefgpgknn";
    }
    {
      # Vimium
      # https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb
      id = "dbepggeogbaibhgnhhndojpepiihcmeb";
    }
    {
      # Darkreader
      # https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh
      id = "eimadpbcbfnmbkopoojfekhnkhdbieeh";
    }
    {
      # wasavi
      # https://chrome.google.com/webstore/detail/wasavi/dgogifpkoilgiofhhhodbodcfgomelhe
      # see https://github.com/philc/vimium/issues/2564
      id = "dgogifpkoilgiofhhhodbodcfgomelhe";
    }
  ];
};
#+end_src

** Firefox

#+begin_quote
‚ö†Ô∏è In order to get the extensions in Firefox to work, you may have to first manually enable the extensions.
#+end_quote

#+begin_src nix :noweb-ref browser-firefox
programs.firefox = {
  enable = true;

  # NOTE: Extensions need firefox.profiles to be defined
  extensions =
    # https://nur.nix-community.org/repos/rycee/
    with nur.repos.rycee.firefox-addons; [
      multi-account-containers # needed by tridactyl
      darkreader
      tridactyl
    ];
};
#+end_src

*** Tridactyl

Tridactyl is the extension introducing the vim bindings into Firefox. It will hijack the body of your new tabs which can bit a bit disruptive to your workflow as it will present a Tridactyl start page which is visually quite busy therefore running =:set newtab about:blank= to clear the body of the new tab can improve the UX and run =:set theme dark= to switch to a dark theme if new tabs are blasting you with white light.

**** Escape Hatch

Remember that =<C-,>= (as described in the Tridactyl documentation which would be =C-,= in Emacs bindings notation or more simply but =Ctrl= + =,‚Äã=) is the Tridactyl /escape hatch/ that gets you into a part within the page view of the browser where you can use the vi-like bindings to navigate or do this.

üí° This is convenient because loading some pages will leave the focus on the URL bar or the search bar and tabbing through may be a tedious way to get to the page view.

**** Ignore mode

Remember that =Shift= + =Insert= (or =Ctrl= + =Alt= + =Escape= but I'm refusing to learn that one because it is quite a dragon of a maneuver to efficiently pull of) will toggle to ignore mode in which all keypresses are passed-through to the web application.

üí° This is convenient for applications that have their own bindings that may conflict with Tridactyl.

**** Search

Use =/= to enter a search query and use =Ctrl= + =g= or =Ctrl= + =G= to cycle through search results.

üí° The search cycling binding is a bit differnet to what vi-bindings users may expect so just pay attention to keep =C-g= and =C-G= (expressed in Emacs notation) within (muscle) memory.

* Docs

#+begin_src nix :tangle doc.nix
# Tangled from README.org
{ config, pkgs, ... }:
let
  texlive-asabina = with pkgs; (texlive.combine {
    inherit (texlive)
      scheme-medium
      luatex

      atenddvi
      IEEEtran
      background
      bashful
      capt-of
      collection-basic
      collection-fontsrecommended
      collection-langeuropean
      collection-langgerman
      collection-latexrecommended
      datetime
      draftwatermark
      enumitem
      eso-pic
      etoolbox
      everypage
      fmtcount
      lastpage
      latexdiff
      mdframed
      needspace
      numprint
      paracol
      pdfcrop
      pgfgantt
      soul
      svg
      tableof
      titlepic
      transparent
      trimspaces
      tocloft
      ulem
      wrapfig
      xargs
      xetex
      xstring
      xtab
      ;
  });
in
{
  home.packages = with pkgs; [
    aspell
    aspellDicts.de
    aspellDicts.en
    aspellDicts.nl
    biber
    bibtex2html
    evince
    libreoffice
    okular
    pandoc
    pdftk
    qrencode
    scim
    texlive-asabina
    visidata
    xournal
    zathura
  ];
}
#+end_src

* Local Variables

For convenience, we call =delete-trailing-whitespace= as outlined in an [[https://www.mail-archive.com/emacs-orgmode@gnu.org/msg112517.html][emacs-orgmode mailing thread]] to automatically clean up trailing whitespaces that may be artifact from tangling noweb refs that
1. contain line-breaks and are being indented or
2. have no noweb-ref writes

;;; Local Variables:
;;; eval: (add-hook 'org-babel-post-tangle-hook #'delete-trailing-whitespace)
;;; eval: (add-hook 'org-babel-post-tangle-hook #'save-buffer :append)
;;; End:
